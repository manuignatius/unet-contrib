{"version":3,"file":"unetjs.min.js","sources":["../node_modules/fjage/dist/esm/fjage.js","../src/unetutils.js","../src/unetsocket.js"],"sourcesContent":["/* fjage.js v1.11.2 */\n\nconst isBrowser =\n  typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\nconst isNode =\n  typeof process !== \"undefined\" &&\n  process.versions != null &&\n  process.versions.node != null;\n\nconst isWebWorker =\n  typeof self === \"object\" &&\n  self.constructor &&\n  self.constructor.name === \"DedicatedWorkerGlobalScope\";\n\n/**\n * @see https://github.com/jsdom/jsdom/releases/tag/12.0.0\n * @see https://github.com/jsdom/jsdom/issues/1537\n */\nconst isJsDom =\n  (typeof window !== \"undefined\" && window.name === \"nodejs\") ||\n  (typeof navigator !== \"undefined\" &&\n    (navigator.userAgent.includes(\"Node.js\") ||\n      navigator.userAgent.includes(\"jsdom\")));\n\ntypeof Deno !== \"undefined\" &&\n  typeof Deno.version !== \"undefined\" &&\n  typeof Deno.version.deno !== \"undefined\";\n\nconst SOCKET_OPEN = 'open';\nconst SOCKET_OPENING = 'opening';\nconst DEFAULT_RECONNECT_TIME$1 = 5000;       // ms, delay between retries to connect to the server.\n\nvar createConnection;\n\n/**\n * @class\n * @ignore\n */\nclass TCPconnector {\n\n  /**\n    * Create an TCPConnector to connect to a fjage master over TCP\n   * @param {Object} opts\n   * @param {string} [opts.hostname='localhost'] - hostname/ip address of the master container to connect to\n   * @param {number} opts.port - port number of the master container to connect to\n   * @param {string} opts.pathname - path of the master container to connect to\n   * @param {boolean} opts.keepAlive - try to reconnect if the connection is lost\n   * @param {number} [opts.reconnectTime=5000] - time before reconnection is attempted after an error\n    */\n  constructor(opts = {}) {\n    this.url = new URL('tcp://localhost');\n    let host = opts.hostname || 'localhost';\n    let port = opts.port || -1;\n    this.url.hostname = host;\n    this.url.port = port;\n    this._buf = '';\n    this._reconnectTime = opts.reconnectTime || DEFAULT_RECONNECT_TIME$1;\n    this._keepAlive = opts.keepAlive || true;\n    this._firstConn = true;               // if the Gateway has managed to connect to a server before\n    this._firstReConn = true;             // if the Gateway has attempted to reconnect to a server before\n    this.pendingOnOpen = [];              // list of callbacks make as soon as gateway is open\n    this.connListeners = [];              // external listeners wanting to listen connection events\n    this._sockInit(host, port);\n  }\n\n\n  _sendConnEvent(val) {\n    this.connListeners.forEach(l => {\n      l && {}.toString.call(l) === '[object Function]' && l(val);\n    });\n  }\n\n  _sockInit(host, port){\n    if (!createConnection){\n      try {\n        import('net').then(module => {\n          createConnection = module.createConnection;\n          this._sockSetup(host, port);\n        });\n      }catch(error){\n        if(this.debug) console.log('Unable to import net module');\n      }\n    }else {\n      this._sockSetup(host, port);\n    }\n  }\n\n  _sockSetup(host, port){\n    if(!createConnection) return;\n    try{\n      this.sock = createConnection({ 'host': host, 'port': port });\n      this.sock.setEncoding('utf8');\n      this.sock.on('connect', this._onSockOpen.bind(this));\n      this.sock.on('error', this._sockReconnect.bind(this));\n      this.sock.on('close', () => {this._sendConnEvent(false);});\n      this.sock.send = data => {this.sock.write(data);};\n    } catch (error) {\n      if(this.debug) console.log('Connection failed to ', this.sock.host + ':' + this.sock.port);\n      return;\n    }\n  }\n\n  _sockReconnect(){\n    if (this._firstConn || !this._keepAlive || this.sock.readyState == SOCKET_OPENING || this.sock.readyState == SOCKET_OPEN) return;\n    if (this._firstReConn) this._sendConnEvent(false);\n    this._firstReConn = false;\n    setTimeout(() => {\n      this.pendingOnOpen = [];\n      this._sockSetup(this.url.hostname, this.url.port);\n    }, this._reconnectTime);\n  }\n\n  _onSockOpen() {\n    this._sendConnEvent(true);\n    this._firstConn = false;\n    this.sock.on('close', this._sockReconnect.bind(this));\n    this.sock.on('data', this._processSockData.bind(this));\n    this.pendingOnOpen.forEach(cb => cb());\n    this.pendingOnOpen.length = 0;\n    this._buf = '';\n  }\n\n  _processSockData(s){\n    this._buf += s;\n    var lines = this._buf.split('\\n');\n    lines.forEach((l, idx) => {\n      if (idx < lines.length-1){\n        if (l && this._onSockRx) this._onSockRx.call(this,l);\n      } else {\n        this._buf = l;\n      }\n    });\n  }\n\n  toString(){\n    let s = '';\n    s += 'TCPConnector [' + this.sock ? this.sock.remoteAddress.toString() + ':' + this.sock.remotePort.toString() : '' + ']';\n    return s;\n  }\n\n  /**\n   * Write a string to the connector\n   * @param {string} s - string to be written out of the connector to the master\n   * @return {boolean} - true if connect was able to write or queue the string to the underlying socket\n   */\n  write(s){\n    if (!this.sock || this.sock.readyState == SOCKET_OPENING){\n      this.pendingOnOpen.push(() => {\n        this.sock.send(s+'\\n');\n      });\n      return true;\n    } else if (this.sock.readyState == SOCKET_OPEN) {\n      this.sock.send(s+'\\n');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Set a callback for receiving incoming strings from the connector\n   * @param {TCPConnector~ReadCallback} cb - callback that is called when the connector gets a string\n   */\n  setReadCallback(cb){\n    if (cb && {}.toString.call(cb) === '[object Function]') this._onSockRx = cb;\n  }\n\n  /**\n   * @callback TCPConnector~ReadCallback\n   * @ignore\n   * @param {string} s - incoming message string\n   */\n\n  /**\n   * Add listener for connection events\n   * @param {function} listener - a listener callback that is called when the connection is opened/closed\n   */\n  addConnectionListener(listener){\n    this.connListeners.push(listener);\n  }\n\n  /**\n   * Remove listener for connection events\n   * @param {function} listener - remove the listener for connection\n   * @return {boolean} - true if the listner was removed successfully\n   */\n  removeConnectionListener(listener) {\n    let ndx = this.connListeners.indexOf(listener);\n    if (ndx >= 0) {\n      this.connListeners.splice(ndx, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Close the connector\n   */\n  close(){\n    if (!this.sock) return;\n    if (this.sock.readyState == SOCKET_OPENING) {\n      this.pendingOnOpen.push(() => {\n        this.sock.send('{\"alive\": false}\\n');\n        this.sock.removeAllListeners('connect');\n        this.sock.removeAllListeners('error');\n        this.sock.removeAllListeners('close');\n        this.sock.destroy();\n      });\n    } else if (this.sock.readyState == SOCKET_OPEN) {\n      this.sock.send('{\"alive\": false}\\n');\n      this.sock.removeAllListeners('connect');\n      this.sock.removeAllListeners('error');\n      this.sock.removeAllListeners('close');\n      this.sock.destroy();\n    }\n  }\n}\n\nconst DEFAULT_RECONNECT_TIME = 5000;       // ms, delay between retries to connect to the server.\n\n/**\n * @class\n * @ignore\n */\nclass WSConnector {\n\n  /**\n   * Create an WSConnector to connect to a fjage master over WebSockets\n   * @param {Object} opts\n   * @param {string} opts.hostname - hostname/ip address of the master container to connect to\n   * @param {number} opts.port - port number of the master container to connect to\n   * @param {string} opts.pathname - path of the master container to connect to\n   * @param {boolean} opts.keepAlive - try to reconnect if the connection is lost\n   * @param {number} [opts.reconnectTime=5000] - time before reconnection is attempted after an error\n   */\n  constructor(opts = {}) {\n    this.url = new URL('ws://localhost');\n    this.url.hostname = opts.hostname;\n    this.url.port = opts.port;\n    this.url.pathname = opts.pathname;\n    this._reconnectTime = opts.reconnectTime || DEFAULT_RECONNECT_TIME;\n    this._keepAlive = opts.keepAlive || true;\n    this.debug = opts.debug || false;      // debug info to be logged to console?\n    this._firstConn = true;               // if the Gateway has managed to connect to a server before\n    this._firstReConn = true;             // if the Gateway has attempted to reconnect to a server before\n    this.pendingOnOpen = [];              // list of callbacks make as soon as gateway is open\n    this.connListeners = [];              // external listeners wanting to listen connection events\n    this._websockSetup(this.url);\n  }\n\n  _sendConnEvent(val) {\n    this.connListeners.forEach(l => {\n      l && {}.toString.call(l) === '[object Function]' && l(val);\n    });\n  }\n\n  _websockSetup(url){\n    try {\n      this.sock = new WebSocket(url);\n      this.sock.onerror = this._websockReconnect.bind(this);\n      this.sock.onopen = this._onWebsockOpen.bind(this);\n      this.sock.onclose = () => {this._sendConnEvent(false);};\n    } catch (error) {\n      if(this.debug) console.log('Connection failed to ', url);\n      return;\n    }\n  }\n\n  _websockReconnect(){\n    if (this._firstConn || !this._keepAlive || this.sock.readyState == this.sock.CONNECTING || this.sock.readyState == this.sock.OPEN) return;\n    if (this._firstReConn) this._sendConnEvent(false);\n    this._firstReConn = false;\n    if(this.debug) console.log('Reconnecting to ', this.sock.url);\n    setTimeout(() => {\n      this.pendingOnOpen = [];\n      this._websockSetup(this.sock.url);\n    }, this._reconnectTime);\n  }\n\n  _onWebsockOpen() {\n    if(this.debug) console.log('Connected to ', this.sock.url);\n    this._sendConnEvent(true);\n    this.sock.onclose = this._websockReconnect.bind(this);\n    this.sock.onmessage = event => { if (this._onWebsockRx) this._onWebsockRx.call(this,event.data); };\n    this._firstConn = false;\n    this._firstReConn = true;\n    this.pendingOnOpen.forEach(cb => cb());\n    this.pendingOnOpen.length = 0;\n  }\n\n  toString(){\n    let s = '';\n    s += 'WSConnector [' + this.sock ? this.sock.url.toString() : '' + ']';\n    return s;\n  }\n\n  /**\n   * Write a string to the connector\n   * @param {string} s - string to be written out of the connector to the master\n   */\n  write(s){\n    if (!this.sock || this.sock.readyState == this.sock.CONNECTING){\n      this.pendingOnOpen.push(() => {\n        this.sock.send(s+'\\n');\n      });\n      return true;\n    } else if (this.sock.readyState == this.sock.OPEN) {\n      this.sock.send(s+'\\n');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Set a callback for receiving incoming strings from the connector\n   * @param {WSConnector~ReadCallback} cb - callback that is called when the connector gets a string\n   * @ignore\n   */\n  setReadCallback(cb){\n    if (cb && {}.toString.call(cb) === '[object Function]') this._onWebsockRx = cb;\n  }\n\n  /**\n   * @callback WSConnector~ReadCallback\n   * @ignore\n   * @param {string} s - incoming message string\n   */\n\n  /**\n   * Add listener for connection events\n   * @param {function} listener - a listener callback that is called when the connection is opened/closed\n   */\n  addConnectionListener(listener){\n    this.connListeners.push(listener);\n  }\n\n  /**\n   * Remove listener for connection events\n   * @param {function} listener - remove the listener for connection\n   * @return {boolean} - true if the listner was removed successfully\n   */\n  removeConnectionListener(listener) {\n    let ndx = this.connListeners.indexOf(listener);\n    if (ndx >= 0) {\n      this.connListeners.splice(ndx, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Close the connector\n   */\n  close(){\n    if (!this.sock) return;\n    if (this.sock.readyState == this.sock.CONNECTING) {\n      this.pendingOnOpen.push(() => {\n        this.sock.send('{\"alive\": false}\\n');\n        this.sock.onclose = null;\n        this.sock.close();\n      });\n    } else if (this.sock.readyState == this.sock.OPEN) {\n      this.sock.send('{\"alive\": false}\\n');\n      this.sock.onclose = null;\n      this.sock.close();\n    }\n  }\n}\n\n/* global global Buffer */\n\n\nconst DEFAULT_QUEUE_SIZE = 128;        // max number of old unreceived messages to store\n\n/**\n * An action represented by a message. The performative actions are a subset of the\n * FIPA ACL recommendations for interagent communication.\n * @typedef {Object} Performative\n */\nconst Performative = {\n  REQUEST: 'REQUEST',               // Request an action to be performed\n  AGREE: 'AGREE',                   // Agree to performing the requested action\n  REFUSE: 'REFUSE',                 // Refuse to perform the requested action\n  FAILURE: 'FAILURE',               // Notification of failure to perform a requested or agreed action\n  INFORM: 'INFORM',                 // Notification of an event\n  CONFIRM: 'CONFIRM',               // Confirm that the answer to a query is true\n  DISCONFIRM: 'DISCONFIRM',         // Confirm that the answer to a query is false\n  QUERY_IF: 'QUERY_IF',             // Query if some statement is true or false\n  NOT_UNDERSTOOD: 'NOT_UNDERSTOOD', // Notification that a message was not understood\n  CFP: 'CFP',                       // Call for proposal\n  PROPOSE: 'PROPOSE',               // Response for CFP\n  CANCEL: 'CANCEL'                  // Cancel pending request\n};\n\n/**\n * An identifier for an agent or a topic.\n * @class\n * @param {string} name - name of the agent\n * @param {boolean} topic - name of topic\n * @param {Gateway} owner - Gateway owner for this AgentID\n */\nclass AgentID {\n\n\n  constructor(name, topic, owner) {\n    this.name = name;\n    this.topic = topic;\n    this.owner = owner;\n  }\n\n  /**\n   * Gets the name of the agent or topic.\n   *\n   * @returns {string} - name of agent or topic\n   */\n  getName() {\n    return this.name;\n  }\n\n  /**\n   * Returns true if the agent id represents a topic.\n   *\n   * @returns {boolean} - true if the agent id represents a topic, false if it represents an agent\n   */\n  isTopic() {\n    return this.topic;\n  }\n\n  /**\n   * Sends a message to the agent represented by this id.\n   *\n   * @param {string} msg - message to send\n   * @returns {void}\n   */\n  send(msg) {\n    msg.recipient = this.toJSON();\n    this.owner.send(msg);\n  }\n\n  /**\n   * Sends a request to the agent represented by this id and waits for a reponse.\n   *\n   * @param {Message} msg - request to send\n   * @param {number} [timeout=1000] - timeout in milliseconds\n   * @returns {Promise<Message>} - response\n   */\n  async request(msg, timeout=1000) {\n    msg.recipient = this.toJSON();\n    return this.owner.request(msg, timeout);\n  }\n\n  /**\n   * Gets a string representation of the agent id.\n   *\n   * @returns {string} - string representation of the agent id\n   */\n  toString() {\n    return this.toJSON() + ((this.owner && this.owner.connector) ? ` on ${this.owner.connector.url}` : '');\n  }\n\n  /**\n   * Gets a JSON string representation of the agent id.\n   *\n   * @returns {string} - JSON string representation of the agent id\n   */\n  toJSON() {\n    return (this.topic ? '#' : '') + this.name;\n  }\n\n  /**\n   * Sets parameter(s) on the Agent referred to by this AgentID.\n   *\n   * @param {(string|string[])} params - parameters name(s) to be set\n   * @param {(Object|Object[])} values - parameters value(s) to be set\n   * @param {number} [index=-1] - index of parameter(s) to be set\n   * @param {number} [timeout=5000] - timeout for the response\n   * @returns {Promise<(Object|Object[])>} - a promise which returns the new value(s) of the parameters\n   */\n  async set (params, values, index=-1, timeout=5000) {\n    if (!params) return null;\n    let msg = new ParameterReq();\n    msg.recipient = this.name;\n    if (Array.isArray(params)){\n      msg.param = params.shift();\n      msg.value = values.shift();\n      msg.requests = params.map((p, i) => {\n        return {\n          'param': p,\n          'value': values[i]\n        };\n      });\n      // Add back for generating a response\n      params.unshift(msg.param);\n    } else {\n      msg.param = params;\n      msg.value = values;\n    }\n    msg.index = Number.isInteger(index) ? index : -1;\n    const rsp = await this.owner.request(msg, timeout);\n    var ret = Array.isArray(params) ? new Array(params.length).fill(null) : null;\n    if (!rsp || rsp.perf != Performative.INFORM || !rsp.param) return ret;\n    if (Array.isArray(params)) {\n      if (!rsp.values) rsp.values = {};\n      if (rsp.param) rsp.values[rsp.param] = rsp.value;\n      const rvals = Object.keys(rsp.values);\n      return params.map( p => {\n        let f = rvals.find(rv => rv.endsWith(p));\n        return f ? rsp.values[f] : null;\n      });\n    } else {\n      return rsp.value;\n    }\n  }\n\n\n  /**\n   * Gets parameter(s) on the Agent referred to by this AgentID.\n   *\n   * @param {(?string|?string[])} params - parameters name(s) to be get, null implies get value of all parameters on the Agent\n   * @param {number} [index=-1] - index of parameter(s) to be get\n   * @param {number} [timeout=5000] - timeout for the response\n   * @returns {Promise<(?Object|?Object[])>} - a promise which returns the value(s) of the parameters\n   */\n  async get(params, index=-1, timeout=5000) {\n    let msg = new ParameterReq();\n    msg.recipient = this.name;\n    if (params){\n      if (Array.isArray(params)) {\n        msg.param = params.shift();\n        msg.requests = params.map(p => {return {'param': p};});\n        // Add back for generating a response\n        params.unshift(msg.param);\n      }\n      else msg.param = params;\n    }\n    msg.index = Number.isInteger(index) ? index : -1;\n    const rsp = await this.owner.request(msg, timeout);\n    var ret = Array.isArray(params) ? new Array(params.length).fill(null) : null;\n    if (!rsp || rsp.perf != Performative.INFORM || (params && (!rsp.param))) return ret;\n    // Request for listing of all parameters.\n    if (!params) {\n      if (!rsp.values) rsp.values = {};\n      if (rsp.param) rsp.values[rsp.param] = rsp.value;\n      return rsp.values;\n    } else if (Array.isArray(params)) {\n      if (!rsp.values) rsp.values = {};\n      if (rsp.param) rsp.values[rsp.param] = rsp.value;\n      const rvals = Object.keys(rsp.values);\n      return params.map(p => {\n        let f = rvals.find(rv => rv.endsWith(p));\n        return f ? rsp.values[f] : null;\n      });\n    } else {\n      return rsp.value;\n    }\n  }\n}\n\n/**\n * Base class for messages transmitted by one agent to another. Creates an empty message.\n * @class\n * @param {Message} inReplyTo - message to which this response corresponds to\n * @param {Performative} - performative\n */\nclass Message {\n\n  constructor(inReplyTo={msgID:null, sender:null}, perf='') {\n    this.__clazz__ = 'org.arl.fjage.Message';\n    this.msgID = _guid(8);\n    this.sender = null;\n    this.recipient = inReplyTo.sender;\n    this.perf = perf;\n    this.inReplyTo = inReplyTo.msgID || null;\n  }\n\n  /**\n   * Gets a string representation of the message.\n   *\n   * @returns {string} - string representation\n   */\n  toString() {\n    let s = '';\n    let suffix = '';\n    if (!this.__clazz__) return '';\n    let clazz = this.__clazz__;\n    clazz = clazz.replace(/^.*\\./, '');\n    let perf = this.perf;\n    for (var k in this) {\n      if (k.startsWith('__')) continue;\n      if (k == 'sender') continue;\n      if (k == 'recipient') continue;\n      if (k == 'msgID') continue;\n      if (k == 'perf') continue;\n      if (k == 'inReplyTo') continue;\n      if (typeof this[k] == 'object') {\n        suffix = ' ...';\n        continue;\n      }\n      s += ' ' + k + ':' + this[k];\n    }\n    s += suffix;\n    return clazz+':'+perf+'['+s.replace(/^ /, '')+']';\n  }\n\n  // convert a message into a JSON string\n  // NOTE: we don't do any base64 encoding for TX as\n  //       we don't know what data type is intended\n  /** @private */\n  _serialize() {\n    let clazz = this.__clazz__ || 'org.arl.fjage.Message';\n    let data = JSON.stringify(this, (k,v) => {\n      if (k.startsWith('__')) return;\n      return v;\n    });\n    return '{ \"clazz\": \"'+clazz+'\", \"data\": '+data+' }';\n  }\n\n  // inflate a data dictionary into the message\n  /** @private */\n  _inflate(data) {\n    for (var key in data)\n      this[key] = data[key];\n  }\n\n  // convert a dictionary (usually from decoding JSON) into a message\n  /** @private */\n  static _deserialize(obj) {\n    if (typeof obj == 'string' || obj instanceof String) {\n      try {\n        obj = JSON.parse(obj);\n      }catch(e){\n        return null;\n      }\n    }\n    let qclazz = obj.clazz;\n    let clazz = qclazz.replace(/^.*\\./, '');\n    let rv = MessageClass[clazz] ? new MessageClass[clazz] : new Message();\n    rv.__clazz__ = qclazz;\n    rv._inflate(obj.data);\n    return rv;\n  }\n}\n\n/**\n * A message class that can convey generic messages represented by key-value pairs.\n * @class\n * @extends Message\n */\nclass GenericMessage extends Message {\n  /**\n   * Creates an empty generic message.\n   */\n  constructor() {\n    super();\n    this.__clazz__ = 'org.arl.fjage.GenericMessage';\n  }\n}\n\n/**\n * A gateway for connecting to a fjage master container. The new version of the constructor\n * uses an options object instead of individual parameters. The old version with\n *\n *\n * @class\n * @param {Object} opts\n * @param {string} [opts.hostname=\"localhost\"] - hostname/ip address of the master container to connect to\n * @param {number} [opts.port=1100]          - port number of the master container to connect to\n * @param {string} [opts.pathname=\"\"]        - path of the master container to connect to (for WebSockets)\n * @param {string} [opts.keepAlive=true]     - try to reconnect if the connection is lost\n * @param {number} [opts.queueSize=128]      - size of the queue of received messages that haven't been consumed yet\n * @param {number} [opts.timeout=1000]       - timeout for fjage level messages in ms\n * @param {string} [hostname=\"localhost\"]    - <strike>Deprecated : hostname/ip address of the master container to connect to</strike>\n * @param {number} [port=]                   - <strike>Deprecated : port number of the master container to connect to</strike>\n * @param {string} [pathname==\"/ws/\"]        - <strike>Deprecated : path of the master container to connect to (for WebSockets)</strike>\n * @param {number} [timeout=1000]            - <strike>Deprecated : timeout for fjage level messages in ms</strike>\n */\nclass Gateway {\n\n  constructor(opts = {}, port, pathname='/ws/', timeout=1000) {\n    // Support for deprecated constructor\n    if (typeof opts === 'string' || opts instanceof String){\n      opts = {\n        'hostname': opts,\n        'port' : port || gObj.location.port,\n        'pathname' : pathname,\n        'timeout' : timeout\n      };\n      console.warn('Deprecated use of Gateway constructor');\n    }\n    opts = Object.assign({}, GATEWAY_DEFAULTS, opts);\n    var url = DEFAULT_URL;\n    url.hostname = opts.hostname;\n    url.port = opts.port;\n    url.pathname = opts.pathname;\n    let existing = this._getGWCache(url);\n    if (existing) return existing;\n    this._timeout = opts.timeout;         // timeout for fjage level messages (agentForService etc)\n    this._keepAlive = opts.keepAlive;     // reconnect if connection gets closed/errored\n    this._queueSize = opts.queueSize;      // size of queue\n    this.pending = {};                    // msgid to callback mapping for pending requests to server\n    this.subscriptions = {};              // hashset for all topics that are subscribed\n    this.listener = {};                   // set of callbacks that want to listen to incoming messages\n    this.eventListeners = {};             // external listeners wanting to listen internal events\n    this.queue = [];                      // incoming message queue\n    this.debug = false;                   // debug info to be logged to console?\n    this.aid = new AgentID((isBrowser ? 'WebGW-' : 'NodeGW-')+_guid(4));         // gateway agent name\n    this.connector = this._createConnector(url);\n    this._addGWCache(this);\n  }\n\n  /** @private */\n  _sendEvent(type, val) {\n    if (Array.isArray(this.eventListeners[type])) {\n      this.eventListeners[type].forEach(l => {\n        if (l && {}.toString.call(l) === '[object Function]'){\n          try {\n            l(val);\n          } catch (error) {\n            console.warn('Error in event listener : ' + error);\n          }\n        }\n      });\n    }\n  }\n\n  /** @private */\n  _onMsgRx(data) {\n    var obj;\n    if (this.debug) console.log('< '+data);\n    this._sendEvent('rx', data);\n    try {\n      obj = JSON.parse(data, _decodeBase64);\n    }catch(e){\n      return;\n    }\n    this._sendEvent('rxp', obj);\n    if ('id' in obj && obj.id in this.pending) {\n      // response to a pending request to master\n      this.pending[obj.id](obj);\n      delete this.pending[obj.id];\n    } else if (obj.action == 'send') {\n      // incoming message from master\n      let msg = Message._deserialize(obj.message);\n      if (!msg) return;\n      this._sendEvent('rxmsg', msg);\n      if ((msg.recipient == this.aid.toJSON() )|| this.subscriptions[msg.recipient]) {\n        var consumed = false;\n        if (Array.isArray(this.eventListeners['message'])){\n          for (var i = 0; i < this.eventListeners['message'].length; i++) {\n            try {\n              if (this.eventListeners['message'][i](msg)) {\n                consumed = true;\n                break;\n              }\n            } catch (error) {\n              console.warn('Error in message listener : ' + error);\n            }\n          }\n        }\n        // iterate over internal callbacks, until one consumes the message\n        for (var key in this.listener){\n          // callback returns true if it has consumed the message\n          try {\n            if (this.listener[key](msg)) {\n              consumed = true;\n              break;\n            }\n          } catch (error) {\n            console.warn('Error in listener : ' + error);\n          }\n        }\n        if(!consumed) {\n          if (this.queue.length >= this._queueSize) this.queue.shift();\n          this.queue.push(msg);\n        }\n      }\n    } else {\n      // respond to standard requests that every container must\n      let rsp = { id: obj.id, inResponseTo: obj.action };\n      switch (obj.action) {\n      case 'agents':\n        rsp.agentIDs = [this.aid.getName()];\n        break;\n      case 'containsAgent':\n        rsp.answer = (obj.agentID == this.aid.getName());\n        break;\n      case 'services':\n        rsp.services = [];\n        break;\n      case 'agentForService':\n        rsp.agentID = '';\n        break;\n      case 'agentsForService':\n        rsp.agentIDs = [];\n        break;\n      default:\n        rsp = undefined;\n      }\n      if (rsp) this._msgTx(rsp);\n    }\n  }\n\n  /** @private */\n  _msgTx(s) {\n    if (typeof s != 'string' && !(s instanceof String)) s = JSON.stringify(s);\n    if(this.debug) console.log('> '+s);\n    this._sendEvent('tx', s);\n    return this.connector.write(s);\n  }\n\n  /** @private */\n  _msgTxRx(rq) {\n    rq.id = _guid(8);\n    return new Promise(resolve => {\n      let timer = setTimeout(() => {\n        delete this.pending[rq.id];\n        if (this.debug) console.log('Receive Timeout : ' + rq);\n        resolve();\n      }, 8*this._timeout);\n      this.pending[rq.id] = rsp => {\n        clearTimeout(timer);\n        resolve(rsp);\n      };\n      if (!this._msgTx.call(this,rq)) {\n        clearTimeout(timer);\n        delete this.pending[rq.id];\n        if (this.debug) console.log('Transmit Timeout : ' + rq);\n        resolve();\n      }\n    });\n  }\n\n  /** @private */\n  _createConnector(url){\n    let conn;\n    if (url.protocol.startsWith('ws')){\n      conn =  new WSConnector({\n        'hostname':url.hostname,\n        'port':url.port,\n        'pathname':url.pathname,\n        'keepAlive': this._keepAlive\n      });\n    }else if (url.protocol.startsWith('tcp')){\n      conn = new TCPconnector({\n        'hostname':url.hostname,\n        'port':url.port,\n        'keepAlive': this._keepAlive\n      });\n    } else return null;\n    conn.setReadCallback(this._onMsgRx.bind(this));\n    conn.addConnectionListener(state => {\n      if (state == true){\n        this.flush();\n        this.connector.write('{\"alive\": true}');\n        this._update_watch();\n      }\n      this._sendEvent('conn', state);\n    });\n    return conn;\n  }\n\n  /** @private */\n  _matchMessage(filter, msg){\n    if (typeof filter == 'string' || filter instanceof String) {\n      return 'inReplyTo' in msg && msg.inReplyTo == filter;\n    } else if (Object.prototype.hasOwnProperty.call(filter, 'msgID')) {\n      return 'inReplyTo' in msg && msg.inReplyTo == filter.msgID;\n    } else if (filter.__proto__.name == 'Message' || filter.__proto__.__proto__.name == 'Message') {\n      return filter.__clazz__ == msg.__clazz__;\n    } else if (typeof filter == 'function') {\n      try {\n        return filter(msg);\n      }catch(e){\n        console.warn('Error in filter : ' + e);\n        return false;\n      }\n    } else {\n      return msg instanceof filter;\n    }\n  }\n\n  /** @private */\n  _getMessageFromQueue(filter) {\n    if (!this.queue.length) return;\n    if (!filter) return this.queue.shift();\n\n    let matchedMsg = this.queue.find( msg => this._matchMessage(filter, msg));\n    if (matchedMsg) this.queue.splice(this.queue.indexOf(matchedMsg), 1);\n\n    return matchedMsg;\n  }\n\n  /** @private */\n  _getGWCache(url){\n    if (!gObj.fjage || !gObj.fjage.gateways) return null;\n    var f = gObj.fjage.gateways.filter(g => g.connector.url.toString() == url.toString());\n    if (f.length ) return f[0];\n    return null;\n  }\n\n  /** @private */\n  _addGWCache(gw){\n    if (!gObj.fjage || !gObj.fjage.gateways) return;\n    gObj.fjage.gateways.push(gw);\n  }\n\n  /** @private */\n  _removeGWCache(gw){\n    if (!gObj.fjage || !gObj.fjage.gateways) return;\n    var index = gObj.fjage.gateways.indexOf(gw);\n    if (index != null) gObj.fjage.gateways.splice(index,1);\n  }\n\n  /** @private */\n  _update_watch() {\n    // FIXME : Turning off wantsMessagesFor in fjagejs for now as it breaks multiple browser\n    // windows connecting to the same master container.\n    //\n    // let watch = Object.keys(this.subscriptions);\n    // watch.push(this.aid.getName());\n    // let rq = { action: 'wantsMessagesFor', agentIDs: watch };\n    // this._msgTx(rq);\n  }\n\n  /**\n   * Add an event listener to listen to various events happening on this Gateway\n   *\n   * @param {string} type - type of event to be listened to\n   * @param {function} listener - new callback/function to be called when the event happens\n   * @returns {void}\n   */\n  addEventListener(type, listener) {\n    if (!Array.isArray(this.eventListeners[type])){\n      this.eventListeners[type] = [];\n    }\n    this.eventListeners[type].push(listener);\n  }\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {string} type - type of event the listener was for\n   * @param {function} listener - callback/function which was to be called when the event happens\n   * @returns {void}\n   */\n  removeEventListener(type, listener) {\n    if (!this.eventListeners[type]) return;\n    let ndx = this.eventListeners[type].indexOf(listener);\n    if (ndx >= 0) this.eventListeners[type].splice(ndx, 1);\n  }\n\n  /**\n   * Add a new listener to listen to all {Message}s sent to this Gateway\n   *\n   * @param {function} listener - new callback/function to be called when a {Message} is received\n   * @returns {void}\n   */\n  addMessageListener(listener) {\n    this.addEventListener('message',listener);\n  }\n\n  /**\n   * Remove a message listener.\n   *\n   * @param {function} listener - removes a previously registered listener/callback\n   * @returns {void}\n   */\n  removeMessageListener(listener) {\n    this.removeEventListener('message', listener);\n  }\n\n  /**\n   * Add a new listener to get notified when the connection to master is created and terminated.\n   *\n   * @param {function} listener - new callback/function to be called connection to master is created and terminated\n   * @returns {void}\n   */\n  addConnListener(listener) {\n    this.addEventListener('conn', listener);\n  }\n\n  /**\n   * Remove a connection listener.\n   *\n   * @param {function} listener - removes a previously registered listener/callback\n   * @returns {void}\n   */\n  removeConnListener(listener) {\n    this.removeEventListener('conn', listener);\n  }\n\n  /**\n   * Gets the agent ID associated with the gateway.\n   *\n   * @returns {string} - agent ID\n   */\n  getAgentID() {\n    return this.aid;\n  }\n\n  /**\n   * Get an AgentID for a given agent name.\n   *\n   * @param {string} name - name of agent\n   * @returns {AgentID} - AgentID for the given name\n   */\n  agent(name) {\n    return new AgentID(name, false, this);\n  }\n\n  /**\n   * Returns an object representing the named topic.\n   *\n   * @param {string|AgentID} topic - name of the topic or AgentID\n   * @param {string} topic2 - name of the topic if the topic param is an AgentID\n   * @returns {AgentID} - object representing the topic\n   */\n  topic(topic, topic2) {\n    if (typeof topic == 'string' || topic instanceof String) return new AgentID(topic, true, this);\n    if (topic instanceof AgentID) {\n      if (topic.isTopic()) return topic;\n      return new AgentID(topic.getName()+(topic2 ? '__' + topic2 : '')+'__ntf', true, this);\n    }\n  }\n\n  /**\n   * Subscribes the gateway to receive all messages sent to the given topic.\n   *\n   * @param {AgentID} topic - the topic to subscribe to\n   * @returns {boolean} - true if the subscription is successful, false otherwise\n   */\n  subscribe(topic) {\n    if (!topic.isTopic()) topic = new AgentID(topic.getName() + '__ntf', true, this);\n    this.subscriptions[topic.toJSON()] = true;\n    this._update_watch();\n  }\n\n  /**\n   * Unsubscribes the gateway from a given topic.\n   *\n   * @param {AgentID} topic - the topic to unsubscribe\n   * @returns {void}\n   */\n  unsubscribe(topic) {\n    if (!topic.isTopic()) topic = new AgentID(topic.getName() + '__ntf', true, this);\n    delete this.subscriptions[topic.toJSON()];\n    this._update_watch();\n  }\n\n  /**\n   * Finds an agent that provides a named service. If multiple agents are registered\n   * to provide a given service, any of the agents' id may be returned.\n   *\n   * @param {string} service - the named service of interest\n   * @returns {Promise<?AgentID>} - a promise which returns an agent id for an agent that provides the service when resolved\n   */\n  async agentForService(service) {\n    let rq = { action: 'agentForService', service: service };\n    let rsp = await this._msgTxRx(rq);\n    if (!rsp || !rsp.agentID) return;\n    return new AgentID(rsp.agentID, false, this);\n  }\n\n  /**\n   * Finds all agents that provides a named service.\n   *\n   * @param {string} service - the named service of interest\n   * @returns {Promise<?AgentID[]>} - a promise which returns an array of all agent ids that provides the service when resolved\n   */\n  async agentsForService(service) {\n    let rq = { action: 'agentsForService', service: service };\n    let rsp = await this._msgTxRx(rq);\n    let aids = [];\n    if (!rsp || !Array.isArray(rsp.agentIDs)) return aids;\n    for (var i = 0; i < rsp.agentIDs.length; i++)\n      aids.push(new AgentID(rsp.agentIDs[i], false, this));\n    return aids;\n  }\n\n  /**\n   * Sends a message to the recipient indicated in the message. The recipient\n   * may be an agent or a topic.\n   *\n   * @param {Message} msg - message to be sent\n   * @returns {boolean} - if sending was successful\n   */\n  send(msg) {\n    msg.sender = this.aid.toJSON();\n    if (msg.perf == '') {\n      if (msg.__clazz__.endsWith('Req')) msg.perf = Performative.REQUEST;\n      else msg.perf = Performative.INFORM;\n    }\n    this._sendEvent('txmsg', msg);\n    let rq = JSON.stringify({ action: 'send', relay: true, message: '###MSG###' });\n    rq = rq.replace('\"###MSG###\"', msg._serialize());\n    return !!this._msgTx(rq);\n  }\n\n  /**\n   * Flush the Gateway queue for all pending messages. This drops all the pending messages.\n   * @returns {void}\n   *\n   */\n  flush() {\n    this.queue.length = 0;\n  }\n\n  /**\n   * Sends a request and waits for a response. This method returns a {Promise} which resolves when a response\n   * is received or if no response is received after the timeout.\n   *\n   * @param {string} msg - message to send\n   * @param {number} [timeout=1000] - timeout in milliseconds\n   * @returns {Promise<?Message>} - a promise which resolves with the received response message, null on timeout\n   */\n  async request(msg, timeout=1000) {\n    this.send(msg);\n    return this.receive(msg, timeout);\n  }\n\n  /**\n   * Returns a response message received by the gateway. This method returns a {Promise} which resolves when\n   * a response is received or if no response is received after the timeout.\n   *\n   * @param {function} [filter=] - original message to which a response is expected, or a MessageClass of the type\n   * of message to match, or a closure to use to match against the message\n   * @param {number} [timeout=0] - timeout in milliseconds\n   * @returns {Promise<?Message>} - received response message, null on timeout\n   */\n  async receive(filter, timeout=0) {\n    return new Promise(resolve => {\n      let msg = this._getMessageFromQueue.call(this,filter);\n      if (msg) {\n        resolve(msg);\n        return;\n      }\n      if (timeout == 0) {\n        if (this.debug) console.log('Receive Timeout : ' + filter);\n        resolve();\n        return;\n      }\n      let lid = _guid(8);\n      let timer;\n      if (timeout > 0){\n        timer = setTimeout(() => {\n          this.listener[lid] && delete this.listener[lid];\n          if (this.debug) console.log('Receive Timeout : ' + filter);\n          resolve();\n        }, timeout);\n      }\n      this.listener[lid] = msg => {\n        if (!this._matchMessage(filter, msg)) return false;\n        if(timer) clearTimeout(timer);\n        this.listener[lid] && delete this.listener[lid];\n        resolve(msg);\n        return true;\n      };\n    });\n  }\n\n  /**\n   * Closes the gateway. The gateway functionality may not longer be accessed after\n   * this method is called.\n   * @returns {void}\n   */\n  close() {\n    this.connector.close();\n    this._removeGWCache(this);\n  }\n\n}\n\n/**\n * Services supported by fjage agents.\n */\nconst Services = {\n  SHELL : 'org.arl.fjage.shell.Services.SHELL'\n};\n\n/**\n * Creates a unqualified message class based on a fully qualified name.\n * @param {string} name - fully qualified name of the message class to be created\n * @param {class} [parent=Message] - class of the parent MessageClass to inherit from\n * @returns {function} - constructor for the unqualified message class\n * @example\n * const ParameterReq = MessageClass('org.arl.fjage.param.ParameterReq');\n * let pReq = new ParameterReq()\n */\nfunction MessageClass(name, parent=Message) {\n  let sname = name.replace(/^.*\\./, '');\n  if (MessageClass[sname]) return MessageClass[sname];\n  let cls = class extends parent {\n    constructor(params) {\n      super();\n      this.__clazz__ = name;\n      if (params){\n        const keys = Object.keys(params);\n        for (let k of keys) {\n          this[k] = params[k];\n        }\n      }\n    }\n  };\n  cls.__clazz__ = name;\n  MessageClass[sname] = cls;\n  return cls;\n}\n\n////// private utilities\n\n// generate random ID with length 4*len characters\n/** @private */\nfunction _guid(len) {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n  let s = s4();\n  for (var i = 0; i < len-1; i++)\n    s += s4();\n  return s;\n}\n\n// convert from base 64 to array\n/** @private */\nfunction _b64toArray(base64, dtype, littleEndian=true) {\n  let s = gObj.atob(base64);\n  let len = s.length;\n  let bytes = new Uint8Array(len);\n  for (var i = 0; i < len; i++)\n    bytes[i] = s.charCodeAt(i);\n  let rv = [];\n  let view = new DataView(bytes.buffer);\n  switch (dtype) {\n  case '[B': // byte array\n    for (i = 0; i < len; i++)\n      rv.push(view.getUint8(i));\n    break;\n  case '[S': // short array\n    for (i = 0; i < len; i+=2)\n      rv.push(view.getInt16(i, littleEndian));\n    break;\n  case '[I': // integer array\n    for (i = 0; i < len; i+=4)\n      rv.push(view.getInt32(i, littleEndian));\n    break;\n  case '[J': // long array\n    for (i = 0; i < len; i+=8)\n      rv.push(view.getInt64(i, littleEndian));\n    break;\n  case '[F': // float array\n    for (i = 0; i < len; i+=4)\n      rv.push(view.getFloat32(i, littleEndian));\n    break;\n  case '[D': // double array\n    for (i = 0; i < len; i+=8)\n      rv.push(view.getFloat64(i, littleEndian));\n    break;\n  default:\n    return;\n  }\n  return rv;\n}\n\n// base 64 JSON decoder\n/** @private */\nfunction _decodeBase64(k, d) {\n  if (d === null) {\n    return null;\n  }\n  if (typeof d == 'object' && 'clazz' in d) {\n    let clazz = d.clazz;\n    if (clazz.startsWith('[') && clazz.length == 2 && 'data' in d) {\n      let x = _b64toArray(d.data, d.clazz);\n      if (x) d = x;\n    }\n  }\n  return d;\n}\n\n////// global\n\nconst GATEWAY_DEFAULTS = {};\nlet gObj = {};\nlet DEFAULT_URL;\nif (isBrowser || isWebWorker){\n  gObj = window;\n  Object.assign(GATEWAY_DEFAULTS, {\n    'hostname': gObj.location.hostname,\n    'port': gObj.location.port,\n    'pathname' : '/ws/',\n    'timeout': 1000,\n    'keepAlive' : true,\n    'queueSize': DEFAULT_QUEUE_SIZE\n  });\n  DEFAULT_URL = new URL('ws://localhost');\n  // Enable caching of Gateways\n  if (typeof gObj.fjage === 'undefined') gObj.fjage = {};\n  if (typeof gObj.fjage.gateways == 'undefined')gObj.fjage.gateways = [];\n} else if (isJsDom || isNode){\n  gObj = global;\n  Object.assign(GATEWAY_DEFAULTS, {\n    'hostname': 'localhost',\n    'port': '1100',\n    'pathname': '',\n    'timeout': 1000,\n    'keepAlive' : true,\n    'queueSize': DEFAULT_QUEUE_SIZE\n  });\n  DEFAULT_URL = new URL('tcp://localhost');\n  gObj.atob = a => Buffer.from(a, 'base64').toString('binary');\n}\n\nconst ParameterReq = MessageClass('org.arl.fjage.param.ParameterReq');\n\nexport { AgentID, Gateway, GenericMessage, Message, MessageClass, Performative, Services };\n","import {AgentID, MessageClass, Services, Gateway} from 'fjage';\n\nconst DatagramReq = MessageClass('org.arl.unet.DatagramReq');\nconst DatagramNtf = MessageClass('org.arl.unet.DatagramNtf');\nconst BasebandSignal = MessageClass('org.arl.unet.bb.BasebandSignal');\n\nlet UnetServices = {\n  'NODE_INFO': 'org.arl.unet.Services.NODE_INFO',\n  'ADDRESS_RESOLUTION': 'org.arl.unet.Services.ADDRESS_RESOLUTION',\n  'DATAGRAM': 'org.arl.unet.Services.DATAGRAM',\n  'PHYSICAL': 'org.arl.unet.Services.PHYSICAL',\n  'RANGING': 'org.arl.unet.Services.RANGING',\n  'BASEBAND': 'org.arl.unet.Services.BASEBAND',\n  'LINK': 'org.arl.unet.Services.LINK',\n  'MAC': 'org.arl.unet.Services.MAC',\n  'ROUTING': 'org.arl.unet.Services.ROUTING',\n  'ROUTE_MAINTENANCE': 'org.arl.unet.Services.ROUTE_MAINTENANCE',\n  'TRANSPORT': 'org.arl.unet.Services.TRANSPORT',\n  'REMOTE': 'org.arl.unet.Services.REMOTE',\n  'STATE_MANAGER': 'org.arl.unet.Services.STATE_MANAGER',\n  'DEVICE_INFO': 'org.arl.unet.Services.DEVICE_INFO',\n  'DOA': 'org.arl.unet.Services.DOA',\n  'SCHEDULER':'org.arl.unet.Services.SCHEDULER'\n};\n\nObject.assign(Services, UnetServices);\n\n/**\n * Well-known protocol number assignments used in UnetStack\n * @typedef {Object.<string, number>} Protocol\n */\nlet Protocol = {\n  'DATA' : 0,               // Protocol number for user application data.\n  'RANGING' : 1,            // Protocol number for use by ranging agents.\n  'LINK' : 2,               // Protocol number for use by link agents.\n  'REMOTE' : 3,             // Protocol number for use by remote management agents.\n  'MAC' : 4,                // Protocol number for use by MAC protocol agents.\n  'ROUTING' : 5,            // Protocol number for use by routing agents.\n  'TRANSPORT' : 6,          // Protocol number for use by transport agents.\n  'ROUTE_MAINTENANCE' : 7,   // Protocol number for use by route maintenance agents.\n  'LINK2' : 8,              // Protocol number for use by secondary link agents.\n  'USER' : 32,              // Lowest protocol number allowable for user protocols.\n  'MAX' : 63,               // Largest protocol number allowable.\n};\n\n/**\n * Well-known protocol Messages used in UnetStack\n * @typedef {Object.<string, MessageClass>} UnetMessages\n */\nlet UnetMessages = {\n  // unet\n  'TestReportNtf'          : MessageClass('org.arl.unet.TestReportNtf'),\n  'AbnormalTerminationNtf' : MessageClass('org.arl.unet.AbnormalTerminationNtf'),\n  'CapabilityListRsp'      : MessageClass('org.arl.unet.CapabilityListRsp'),\n  'CapabilityReq'          : MessageClass('org.arl.unet.CapabilityReq'),\n  'ClearReq'               : MessageClass('org.arl.unet.ClearReq'),\n  'DatagramCancelReq'      : MessageClass('org.arl.unet.DatagramCancelReq'),\n  'DatagramDeliveryNtf'    : MessageClass('org.arl.unet.DatagramDeliveryNtf'),\n  'DatagramFailureNtf'     : MessageClass('org.arl.unet.DatagramFailureNtf'),\n  'DatagramNtf'            : MessageClass('org.arl.unet.DatagramNtf'),\n  'DatagramProgressNtf'    : MessageClass('org.arl.unet.DatagramProgressNtf'),\n  'DatagramReq'            : MessageClass('org.arl.unet.DatagramReq'),\n  'ParamChangeNtf'         : MessageClass('org.arl.unet.ParamChangeNtf'),\n  'RefuseRsp'              : MessageClass('org.arl.unet.RefuseRsp'),\n  'FailureNtf'             : MessageClass('org.arl.unet.FailureNtf'),\n\n  // net\n  'DatagramTraceReq'       : MessageClass('org.arl.unet.net.DatagramTraceReq'),\n  'RouteDiscoveryReq'      : MessageClass('org.arl.unet.net.RouteDiscoveryReq'),\n  'RouteTraceReq'          : MessageClass('org.arl.unet.net.RouteTraceReq'),\n  'RouteDiscoveryNtf'      : MessageClass('org.arl.unet.net.RouteDiscoveryNtf'),\n  'RouteTraceNtf'          : MessageClass('org.arl.unet.net.RouteTraceNtf'),\n\n  // phy\n  'FecDecodeReq'           : MessageClass('org.arl.unet.phy.FecDecodeReq'),\n  'RxJanusFrameNtf'        : MessageClass('org.arl.unet.phy.RxJanusFrameNtf'),\n  'TxJanusFrameReq'        : MessageClass('org.arl.unet.phy.TxJanusFrameReq'),\n  'BadFrameNtf'            : MessageClass('org.arl.unet.phy.BadFrameNtf'),\n  'BadRangeNtf'            : MessageClass('org.arl.unet.phy.BadRangeNtf'),\n  'ClearSyncReq'           : MessageClass('org.arl.unet.phy.ClearSyncReq'),\n  'CollisionNtf'           : MessageClass('org.arl.unet.phy.CollisionNtf'),\n  'RxFrameNtf'             : MessageClass('org.arl.unet.phy.RxFrameNtf', DatagramNtf),\n  'RxFrameStartNtf'        : MessageClass('org.arl.unet.phy.RxFrameStartNtf'),\n  'SyncInfoReq'            : MessageClass('org.arl.unet.phy.SyncInfoReq'),\n  'SyncInfoRsp'            : MessageClass('org.arl.unet.phy.SyncInfoRsp'),\n  'TxFrameNtf'             : MessageClass('org.arl.unet.phy.TxFrameNtf'),\n  'TxFrameReq'             : MessageClass('org.arl.unet.phy.TxFrameReq', DatagramReq),\n  'TxFrameStartNtf'        : MessageClass('org.arl.unet.phy.TxFrameStartNtf'),\n  'TxRawFrameReq'          : MessageClass('org.arl.unet.phy.TxRawFrameReq'),\n\n  // addr\n  'AddressAllocReq'        : MessageClass('org.arl.unet.addr.AddressAllocReq'),\n  'AddressAllocRsp'        : MessageClass('org.arl.unet.addr.AddressAllocRsp'),\n  'AddressResolutionReq'   : MessageClass('org.arl.unet.addr.AddressResolutionReq'),\n  'AddressResolutionRsp'   : MessageClass('org.arl.unet.addr.AddressResolutionRsp'),\n\n  // bb\n  'BasebandSignal'         : MessageClass('org.arl.unet.bb.BasebandSignal'),\n  'RecordBasebandSignalReq' : MessageClass('org.arl.unet.bb.RecordBasebandSignalReq'),\n  'RxBasebandSignalNtf'    : MessageClass('org.arl.unet.bb.RxBasebandSignalNtf', BasebandSignal),\n  'TxBasebandSignalReq'    : MessageClass('org.arl.unet.bb.TxBasebandSignalReq', BasebandSignal),\n\n  // link\n  'LinkStatusNtf'          : MessageClass('org.arl.unet.link.LinkStatusNtf'),\n\n  // localization\n  'RangeNtf'               : MessageClass('org.arl.unet.localization.RangeNtf'),\n  'RangeReq'               : MessageClass('org.arl.unet.localization.RangeReq'),\n  'BeaconReq'              : MessageClass('org.arl.unet.localization.BeaconReq'),\n  'RespondReq'             : MessageClass('org.arl.unet.localization.RespondReq'),\n  'InterrogationNtf'       : MessageClass('org.arl.unet.localization.InterrogationNtf'),\n\n\n  // mac\n  'ReservationAcceptReq'   : MessageClass('org.arl.unet.mac.ReservationAcceptReq'),\n  'ReservationCancelReq'   : MessageClass('org.arl.unet.mac.ReservationCancelReq'),\n  'ReservationReq'         : MessageClass('org.arl.unet.mac.ReservationReq'),\n  'ReservationRsp'         : MessageClass('org.arl.unet.mac.ReservationRsp'),\n  'ReservationStatusNtf'   : MessageClass('org.arl.unet.mac.ReservationStatusNtf'),\n  'RxAckNtf'               : MessageClass('org.arl.unet.mac.RxAckNtf'),\n  'TxAckReq'               : MessageClass('org.arl.unet.mac.TxAckReq'),\n\n\n  // remote\n  'RemoteExecReq'          : MessageClass('org.arl.unet.remote.RemoteExecReq'),\n  'RemoteFailureNtf'       : MessageClass('org.arl.unet.remote.RemoteFailureNtf'),\n  'RemoteFileGetReq'       : MessageClass('org.arl.unet.remote.RemoteFileGetReq'),\n  'RemoteFileNtf'          : MessageClass('org.arl.unet.remote.RemoteFileNtf'),\n  'RemoteFilePutReq'       : MessageClass('org.arl.unet.remote.RemoteFilePutReq'),\n  'RemoteSuccessNtf'       : MessageClass('org.arl.unet.remote.RemoteSuccessNtf'),\n  'RemoteTextNtf'          : MessageClass('org.arl.unet.remote.RemoteTextNtf'),\n  'RemoteTextReq'          : MessageClass('org.arl.unet.remote.RemoteTextReq'),\n\n  // scheduler\n  'AddScheduledSleepReq'   : MessageClass('org.arl.unet.scheduler.AddScheduledSleepReq'),\n  'GetSleepScheduleReq'    : MessageClass('org.arl.unet.scheduler.GetSleepScheduleReq'),\n  'RemoveScheduledSleepReq' : MessageClass('org.arl.unet.scheduler.RemoveScheduledSleepReq'),\n  'SleepScheduleRsp'       : MessageClass('org.arl.unet.scheduler.SleepScheduleRsp'),\n  'WakeFromSleepNtf'       : MessageClass('org.arl.unet.scheduler.WakeFromSleepNtf'),\n\n  // state\n  'ClearStateReq'          : MessageClass('org.arl.unet.state.ClearStateReq'),\n  'SaveStateReq'           : MessageClass('org.arl.unet.state.SaveStateReq')\n};\n\n/**\n  * Convert coordinates from a local coordinates to GPS coordinate\n  * @param {Array} origin - Local coordinate system's origin as `[latitude, longitude]`\n  * @param {Number} x - X coordinate of the local coordinate to be converted\n  * @param {Number} y - Y coordinate of the local coordinate to be converted\n  * @returns {Array} - GPS coordinates (in decimal degrees) as `[latitude, longitude]`\n  */\n\nexport function toGps(origin, x, y) {\n  let coords = [] ;\n  let [xScale,yScale] = _initConv(origin[0]);\n  coords[1] = x/xScale + origin[1];\n  coords[0] = y/yScale + origin[0];\n  return coords;\n}\n\n/**\n  * Convert coordinates from a GPS coordinates to local coordinate\n  * @param {Array} origin - Local coordinate system's origin as `[latitude, longitude]`\n  * @param {Number} lat - Latitude of the GPS coordinate to be converted\n  * @param {Number} lon - Longitude of the GPS coordinate to be converted\n  * @returns {Array} - GPS coordinates (in decimal degrees) as `[latitude, longitude]`\n  */\nexport function toLocal(origin, lat, lon) {\n  let pos = [];\n  let [xScale,yScale] = _initConv(origin[0]);\n  pos[0] = (lon-origin[1]) * xScale;\n  pos[1] = (lat-origin[0]) * yScale;\n  return pos;\n}\n\nfunction _initConv(lat){\n  let rlat = lat * Math.PI/180;\n  let yScale = 111132.92 - 559.82*Math.cos(2*rlat) + 1.175*Math.cos(4*rlat) - 0.0023*Math.cos(6*rlat);\n  let xScale = 111412.84*Math.cos(rlat) - 93.5*Math.cos(3*rlat) + 0.118*Math.cos(5*rlat);\n  return [xScale, yScale];\n}\n\n/**\n * A message which requests the transmission of the datagram from the Unet\n *\n * @typedef {Message} DatagramReq\n * @property {number[]} data - data as an Array of bytes\n * @property {number} from - from/source node address\n * @property {number} to - to/destination node address\n * @property {number} protocol - protocol number to be used to send this Datagram\n * @property {boolean} reliability - true if Datagram should be reliable, false if unreliable\n * @property {number} ttl - time-to-live for the datagram. Time-to-live is advisory, and an agent may choose it ignore it\n */\n\n/**\n * Notification of received datagram message received by the Unet node.\n *\n * @typedef {Message} DatagramNtf\n * @property {number[]} data - data as an Array of bytes\n * @property {number} from - from/source node address\n * @property {number} to - to/destination node address\n * @property {number} protocol - protocol number to be used to send this Datagram\n * @property {number} ttl - time-to-live for the datagram. Time-to-live is advisory, and an agent may choose it ignore it\n */\n\n/**\n * An identifier for an agent or a topic.\n * @external AgentID\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n * Services supported by fjage agents.\n * @external Services\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n *  An action represented by a message.\n * @external Performative\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n * Function to creates a unqualified message class based on a fully qualified name.\n * @external MessageClass\n * @see {@link https://org-arl.github.io/fjage/jsdoc/|fjåge.js Documentation}\n */\n\n/**\n * A caching CachingAgentID which caches Agent parameters locally.\n *\n * @class\n * @extends AgentID\n * @param {string | AgentID} name - name of the agent or an AgentID to copy\n * @param {boolean} topic - name of topic\n * @param {Gateway} owner - Gateway owner for this AgentID\n * @param {Boolean} [greedy=true] - greedily fetches and caches all parameters if this Agent\n *\n*/\nclass CachingAgentID extends AgentID {\n\n  constructor(name, topic, owner, greedy=true) {\n    if (name instanceof AgentID) {\n      super(name.getName(), name.topic, name.owner);\n    } else {\n      super(name, topic, owner);\n    }\n    this.greedy = greedy;\n    this.cache = {};\n    this.specialParams = ['name', 'version'];\n  }\n\n  /**\n   * Sets parameter(s) on the Agent referred to by this AgentID, and caches the parameter(s).\n   *\n   * @param {(string|string[])} params - parameters name(s) to be set\n   * @param {(Object|Object[])} values - parameters value(s) to be set\n   * @param {number} [index=-1] - index of parameter(s) to be set\n   * @param {number} [timeout=5000] - timeout for the response\n   * @returns {Promise<(Object|Object[])>} - a promise which returns the new value(s) of the parameters\n   */\n  async set(params, values, index=-1, timeout=5000) {\n    let s = await super.set(params, values, index, timeout);\n    this._updateCache(params, s, index);\n    return s;\n  }\n\n  /**\n   * Gets parameter(s) on the Agent referred to by this AgentID, getting them from the cache if possible.\n   *\n   * @param {(string|string[])} params - parameters name(s) to be fetched\n   * @param {number} [index=-1] - index of parameter(s) to be fetched\n   * @param {number} [timeout=5000] - timeout for the response\n   * @param {number} [maxage=5000] - maximum age of the cached result to retreive\n   * @returns {Promise<(Object|Object[])>} - a promise which returns the value(s) of the parameters\n   */\n  async get(params, index=-1, timeout=5000, maxage=5000) {\n    if (this._isCached(params, index, maxage)) return this._getCache(params, index);\n    if (this.greedy &&\n      !(Array.isArray(params) && [...new Set([...params, ...this.specialParams])].length!=0) &&\n      !this.specialParams.includes(params)) {\n      let rsp = await super.get(null, index, timeout);\n      this._updateCache(null, rsp, index);\n      if (!rsp) return Array.isArray(params) ? new Array(params.length).fill(null) : null;\n      if (!params) return rsp;\n      else if (Array.isArray(params)) {\n        return params.map(p => {\n          let f = Object.keys(rsp).find(rv => this._toNamed(rv) === p);\n          return f ? rsp[f] : null;\n        });\n      } else {\n        let f = Object.keys(rsp).find(rv => this._toNamed(rv) === params);\n        return f ? rsp[f] : null;\n      }\n    } else{\n      let r = await super.get(params, index, timeout);\n      this._updateCache(params, r, index);\n      return r;\n    }\n  }\n\n  _updateCache(params, vals, index) {\n    if (vals == null || Array.isArray(vals) && vals.every(v => v == null)) return;\n    if (params == null) {\n      params = Object.keys(vals);\n      vals = Object.values(vals);\n    } else if (!Array.isArray(params)) params = [params];\n    if (!Array.isArray(vals)) vals = [vals];\n    params = params.map(this._toNamed);\n    if (this.cache[index.toString()] === undefined) this.cache[index.toString()] = {};\n    let c = this.cache[index.toString()];\n    for (let i = 0; i < params.length; i++) {\n      if (c[params[i]] === undefined) c[params[i]] = {};\n      c[params[i]].value = vals[i];\n      c[params[i]].ctime = Date.now();\n    }\n  }\n\n  _isCached(params, index, maxage) {\n    if (maxage <= 0) return false;\n    if (params == null) return false;\n    let c = this.cache[index.toString()];\n    if (!c) {\n      return false;\n    }\n    if (!Array.isArray(params)) params = [params];\n    const rv = params.every(p => {\n      p = this._toNamed(p);\n      return (p in c) && (Date.now() - c[p].ctime <= maxage);\n    });\n    return rv;\n  }\n\n  _getCache(params, index) {\n    let c = this.cache[index.toString()];\n    if (!c) return null;\n    if (!Array.isArray(params)){\n      if (params in c) return c[params].value;\n      return null;\n    }else {\n      return params.map(p => p in c ? c[p].value : null);\n    }\n  }\n\n  _toNamed(param) {\n    const idx = param.lastIndexOf('.');\n    if (idx < 0) return param;\n    else return param.slice(idx+1);\n  }\n\n}\n\n\nclass CachingGateway extends Gateway{\n\n  /**\n   * Get an AgentID for a given agent name.\n   *\n   * @param {string} name - name of agent\n   * @param {Boolean} [caching=true] - if the AgentID should cache parameters\n   * @param {Boolean} [greedy=true] - greedily fetches and caches all parameters if this Agent\n   * @returns {AgentID|CachingAgentID} - AgentID for the given name\n   */\n  agent(name, caching=true, greedy=true) {\n    const aid = super.agent(name);\n    return caching ? new CachingAgentID(aid, null, null, greedy) : aid;\n  }\n\n  /**\n   * Returns an object representing the named topic.\n   *\n   * @param {string|AgentID} topic - name of the topic or AgentID\n   * @param {string} topic2 - name of the topic if the topic param is an AgentID\n   * @param {Boolean} [caching=true] - if the AgentID should cache parameters\n   * @param {Boolean} [greedy=true] - greedily fetches and caches all parameters if this Agent\n   * @returns {AgentID|CachingAgentID} - object representing the topic\n   */\n  topic(topic, topic2, caching=true, greedy=true) {\n    const aid = super.topic(topic, topic2);\n    return caching ? new CachingAgentID(aid, null, null, greedy) : aid;\n  }\n\n  /**\n   * Finds an agent that provides a named service. If multiple agents are registered\n   * to provide a given service, any of the agents' id may be returned.\n   *\n   * @param {string} service - the named service of interest\n   * @param {Boolean} [caching=true] - if the AgentID should cache parameters\n   * @param {Boolean} [greedy=true] - greedily fetches and caches all parameters if this Agent\n   * @returns {Promise<?AgentID|CachingAgentID>} - a promise which returns an agent id for an agent that provides the service when resolved\n   */\n  async agentForService(service, caching=true, greedy=true) {\n    const aid = await super.agentForService(service);\n    if (!aid) return aid;\n    return caching ? new CachingAgentID(aid, null, null, greedy) : aid;\n  }\n\n  /**\n   * Finds all agents that provides a named service.\n   *\n   * @param {string} service - the named service of interest\n   * @param {Boolean} [caching=true] - if the AgentID should cache parameters\n   * @param {Boolean} [greedy=true] - greedily fetches and caches all parameters if this Agent\n   * @returns {Promise<?AgentID|CachingAgentID[]>} - a promise which returns an array of all agent ids that provides the service when resolved\n   */\n  async agentsForService(service, caching=true, greedy=true) {\n    const aids = await super.agentsForService(service);\n    return caching ? aids.map(a => new CachingAgentID(a, null, null, greedy)) : aids;\n  }\n}\n\nexport {AgentID, Services, UnetMessages, Protocol, CachingGateway, CachingAgentID};\n","import {Gateway, Performative} from 'fjage';\nimport {Services, UnetMessages, Protocol} from './unetutils';\n\nconst REQUEST_TIMEOUT = 1000;\n\nconst AddressResolutionReq = UnetMessages.AddressResolutionReq;\nconst DatagramReq = UnetMessages.DatagramReq;\nconst DatagramNtf = UnetMessages.DatagramNtf;\nconst RxFrameNtf = UnetMessages.RxFrameNtf;\n\n/**\n * Creates a new UnetSocket to connect to a running Unet instance. This constructor returns a\n * {@link Promise} instead of the constructed UnetSocket object. Use `await` or `.then()` to get\n * a reference to the UnetSocket object. Based on if this is run in a Browser or Node.js,\n * it will internally connect over WebSockets or TCP respectively.\n *\n *\n * @class UnetSocket\n * @param {string} [hostname] - hostname/ip address of the master container to connect to\n * @param {number} [port] - port number of the master container to connect to\n * @param {string} [path='']  - path of the master container to connect to (for WebSockets)\n * @returns {Promise<UnetSocket>} - Promise which resolves to the UnetSocket object being constructed\n *\n * @example\n * let socket = await new UnetSocket('localhost', 8081, '/ws/');\n */\nexport default class UnetSocket {\n\n  constructor(hostname, port, path='') {\n    return (async () => {\n      this.gw = new Gateway({\n        hostname : hostname,\n        port : port,\n        path : path\n      });\n      this.localProtocol = -1;\n      this.remoteAddress = -1;\n      this.remoteProtocol = Protocol.DATA;\n      this.timeout = 0;\n      this.provider = null;\n      const alist = await this.gw.agentsForService(Services.DATAGRAM);\n      alist.forEach(a => {this.gw.subscribe(this.gw.topic(a));});\n      return this;\n    })();\n  }\n\n  /**\n   * Closes the socket. The socket functionality may not longer be accessed after this method is called.\n   * @returns {void}\n   */\n  close() {\n    this.gw.close();\n    this.gw = null;\n  }\n\n  /**\n   * Checks if a socket is closed.\n   * @returns {boolean} - true if closed, false if open\n   */\n  isClosed() {\n    return this.gw == null;\n  }\n\n  /**\n   * Binds a socket to listen to a specific protocol datagrams.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are reserved protocols\n   * and cannot be bound. Unbound sockets listen to all unreserved\n   * @param {Protocol} protocol - protocol number to listen for\n   * @returns {boolean} - true on success, false on failure\n   */\n  bind(protocol) {\n    if (protocol == Protocol.DATA || (protocol >= Protocol.USER && protocol <= Protocol.MAX)) {\n      this.localProtocol = protocol;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Unbinds a socket so that it listens to all unreserved protocols.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved.\n   * @returns {void}\n   */\n  unbind() { this.localProtocol = -1;}\n\n  /**\n   * Checks if a socket is bound.\n   * @returns {boolean} - true if bound to a protocol, false if unbound\n   */\n  isBound() { return this.localProtocol >= 0;}\n\n  /**\n   * Sets the default destination address and destination protocol number for datagrams sent\n   * using this socket. The defaults can be overridden for specific send() calls.\n   * The default protcol number when a socket is opened is Protcol.DATA.\n   * The default node address is undefined.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved,\n   * and cannot be used for sending datagrams using the socket.\n   *\n   * @param {number} to - default destination node address\n   * @param {Protocol} protocol - default protocol number\n   * @returns {boolean} - true on success, false on failure\n   */\n  connect(to, protocol) {\n    if (to >= 0 && (protocol == Protocol.DATA || (protocol >= Protocol.USER && protocol <= Protocol.MAX))) {\n      this.remoteAddress = to;\n      this.remoteProtocol = protocol;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Resets the default destination address to undefined, and the default protocol number\n   * to Protocol.DATA.\n   * @returns {void}\n   */\n  disconnect() {\n    this.remoteAddress = -1;\n    this.remoteProtocol = 0;\n  }\n\n  /**\n   * Checks if a socket is connected, i.e., has a default destination address and protocol number.\n   * @returns {boolean} - true if connected, false otherwise\n   */\n  isConnected() { return this.remoteAddress >= 0; }\n\n  /**\n   * Gets the local node address of the Unet node connected to.\n   * @returns {Promise<int>} - local node address, or -1 on error\n   */\n  async getLocalAddress() {\n    if (this.gw == null) return -1;\n    const nodeinfo = await this.gw.agentForService(Services.NODE_INFO);\n    if (nodeinfo == null) return -1;\n    const addr = await nodeinfo.get('address');\n    return addr != null ? addr : -1;\n  }\n\n  /**\n   * Gets the protocol number that the socket is bound to.\n   * @returns {number}} - protocol number if socket is bound, -1 otherwise\n   */\n  getLocalProtocol() { return this.localProtocol; }\n\n  /**\n   * Gets the default destination node address for a connected socket.\n   * @returns {number}} - default destination node address if connected, -1 otherwise\n   */\n  getRemoteAddress() { return this.remoteAddress; }\n\n  /**\n   * Gets the default transmission protocol number.\n   * @returns {number}} - default protocol number used to transmit a datagram\n   */\n  getRemoteProtocol() { return this.remoteProtocol; }\n\n  /**\n   * Sets the timeout for datagram reception. A timeout of 0 means the\n   * {@link UnetSocket#receive|receive method} will check any appropriate\n   * Datagram has already been received (and is cached) else return immediately.\n   *\n   * @param {number} ms - timeout in milliseconds\n   * @returns {void}\n   */\n  setTimeout(ms) {\n    if (ms < 0) ms = 0;\n    this.timeout = ms;\n  }\n\n  /**\n   * Gets the timeout for datagram reception.\n   * @returns {number} - timeout in milliseconds\n   */\n  getTimeout() { return this.timeout; }\n\n  /**\n   * Transmits a datagram to the specified node address using the specified protocol.\n   * Protocol numbers between Protocol.DATA+1 to Protocol.USER-1 are considered reserved,\n   * and cannot be used for sending datagrams using the socket.\n   * @param {number[]|DatagramReq} data - data to be sent over the socket as an Array of bytes or DatagramReq\n   * @param {number} to - destination node address\n   * @param {number} protocol - protocol number\n   * @returns {Promise<boolean>} - true if the Unet node agreed to send out the Datagram, false otherwise\n   */\n  async send(data, to=this.remoteAddress, protocol=this.remoteProtocol) {\n    if (to < 0 || this.gw == null) return false;\n    var req;\n    if (Array.isArray(data)){\n      req = new DatagramReq();\n      req.data = data;\n      req.to = to;\n      req.protocol = protocol;\n    } else if (data instanceof DatagramReq){\n      req = data;\n    } else {\n      return false;\n    }\n    let p = req.protocol;\n    if (p != Protocol.DATA && (p < Protocol.USER || p > Protocol.MAX)) return false;\n    if (req.recipient == null) {\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.TRANSPORT);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.ROUTING);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.LINK);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.PHYSICAL);\n      if (this.provider == null) this.provider = await this.gw.agentForService(Services.DATAGRAM);\n      if (this.provider == null) return false;\n      req.recipient = this.provider;\n    }\n    const rsp = await this.gw.request(req, REQUEST_TIMEOUT);\n    return (rsp != null && rsp.perf == Performative.AGREE);\n  }\n\n  /**\n   * Receives a datagram sent to the local node and the bound protocol number. If the socket is unbound,\n   * then datagrams with all unreserved protocols are received. Any broadcast datagrams are also received.\n   *\n   * @returns {Promise<?DatagramNtf>} - datagram received by the socket\n   */\n  async receive() {\n    if (this.gw == null) return null;\n    return await this.gw.receive(msg => {\n      if (msg.__clazz__ != DatagramNtf.__clazz__ && msg.__clazz__ != RxFrameNtf.__clazz__ ) return false;\n      let p = msg.protocol;\n      if (p == Protocol.DATA || p >= Protocol.USER) {\n        return this.localProtocol < 0 || this.localProtocol == p;\n      }\n      return false;\n    }, this.timeout);\n  }\n\n  /**\n   * Gets a Gateway to provide low-level access to UnetStack.\n   * @returns {Gateway} - underlying fjage Gateway supporting this socket\n   */\n  getGateway() { return this.gw; }\n\n  /**\n   * Gets an AgentID providing a specified service for low-level access to UnetStack\n   * @param {string} svc - the named service of interest\n   * @param {Boolean} caching - if the AgentID should cache parameters\n   * @returns {Promise<?AgentID>} - a promise which returns an {@link AgentID} that provides the service when resolved\n   */\n  async agentForService(svc, caching=true) {\n    if (this.gw == null) return null;\n    return await this.gw.agentForService(svc, caching);\n  }\n\n  /**\n   *\n   * @param {string} svc - the named service of interest\n   * @param {Boolean} caching - if the AgentID should cache parameters\n   * @returns {Promise<AgentID[]>} - a promise which returns an array of {@link AgentID|AgentIDs} that provides the service when resolved\n   */\n  async agentsForService(svc, caching=true) {\n    if (this.gw == null) return null;\n    return await this.gw.agentsForService(svc, caching``);\n  }\n\n  /**\n   * Gets a named AgentID for low-level access to UnetStack.\n   * @param {string} name - name of agent\n   * @param {Boolean} caching - if the AgentID should cache parameters\n   * @returns {AgentID} - AgentID for the given name\n   */\n  agent(name, caching=true) {\n    if (this.gw == null) return null;\n    return this.gw.agent(name, caching);\n  }\n\n  /**\n   * Resolve node name to node address.\n   * @param {string} nodeName - name of the node to resolve\n   * @returns {Promise<?number>} - address of the node, or null if unable to resolve\n   */\n  async host(nodeName) {\n    const arp = await this.agentForService(Services.ADDRESS_RESOLUTION);\n    if (arp == null) return null;\n    const req = new AddressResolutionReq(nodeName);\n    req.name = nodeName;\n    req.recipient = arp;\n    const rsp = await this.gw.request(req, REQUEST_TIMEOUT);\n    if (rsp == null || ! Object.prototype.hasOwnProperty.call(rsp, 'address')) return null;\n    return rsp.address;\n  }\n}"],"names":["isBrowser","window","document","isNode","process","versions","node","isWebWorker","self","constructor","name","isJsDom","navigator","userAgent","includes","Deno","version","deno","SOCKET_OPEN","SOCKET_OPENING","createConnection","TCPconnector","opts","this","url","URL","host","hostname","port","_buf","_reconnectTime","reconnectTime","_keepAlive","keepAlive","_firstConn","_firstReConn","pendingOnOpen","connListeners","_sockInit","_sendConnEvent","val","forEach","l","toString","call","_sockSetup","import","then","module","error","debug","console","log","sock","setEncoding","on","_onSockOpen","bind","_sockReconnect","send","data","write","readyState","setTimeout","_processSockData","cb","length","s","lines","split","idx","_onSockRx","remoteAddress","remotePort","push","setReadCallback","addConnectionListener","listener","removeConnectionListener","ndx","indexOf","splice","close","removeAllListeners","destroy","WSConnector","pathname","_websockSetup","WebSocket","onerror","_websockReconnect","onopen","_onWebsockOpen","onclose","CONNECTING","OPEN","onmessage","event","_onWebsockRx","Performative","REQUEST","AGREE","REFUSE","FAILURE","INFORM","CONFIRM","DISCONFIRM","QUERY_IF","NOT_UNDERSTOOD","CFP","PROPOSE","CANCEL","AgentID","topic","owner","getName","isTopic","msg","recipient","toJSON","request","timeout","connector","set","params","values","index","ParameterReq","Array","isArray","param","shift","value","requests","map","p","i","unshift","Number","isInteger","rsp","ret","fill","perf","rvals","Object","keys","f","find","rv","endsWith","get","Message","inReplyTo","msgID","sender","__clazz__","_guid","suffix","clazz","replace","k","startsWith","_serialize","JSON","stringify","v","_inflate","key","_deserialize","obj","String","parse","e","qclazz","MessageClass","Gateway","gObj","location","warn","assign","GATEWAY_DEFAULTS","DEFAULT_URL","existing","_getGWCache","_timeout","_queueSize","queueSize","pending","subscriptions","eventListeners","queue","aid","_createConnector","_addGWCache","_sendEvent","type","_onMsgRx","_decodeBase64","id","action","message","consumed","inResponseTo","agentIDs","answer","agentID","services","undefined","_msgTx","_msgTxRx","rq","Promise","resolve","timer","clearTimeout","conn","protocol","state","flush","_update_watch","_matchMessage","filter","prototype","hasOwnProperty","__proto__","_getMessageFromQueue","matchedMsg","fjage","gateways","g","gw","_removeGWCache","addEventListener","removeEventListener","addMessageListener","removeMessageListener","addConnListener","removeConnListener","getAgentID","agent","topic2","subscribe","unsubscribe","agentForService","service","agentsForService","aids","relay","receive","lid","Services","SHELL","parent","sname","cls","super","len","s4","Math","floor","random","substring","d","x","base64","dtype","littleEndian","atob","bytes","Uint8Array","charCodeAt","view","DataView","buffer","getUint8","getInt16","getInt32","getInt64","getFloat32","getFloat64","_b64toArray","global","a","Buffer","from","DatagramReq","DatagramNtf","BasebandSignal","NODE_INFO","ADDRESS_RESOLUTION","DATAGRAM","PHYSICAL","RANGING","BASEBAND","LINK","MAC","ROUTING","ROUTE_MAINTENANCE","TRANSPORT","REMOTE","STATE_MANAGER","DEVICE_INFO","DOA","SCHEDULER","Protocol","DATA","LINK2","USER","MAX","UnetMessages","TestReportNtf","AbnormalTerminationNtf","CapabilityListRsp","CapabilityReq","ClearReq","DatagramCancelReq","DatagramDeliveryNtf","DatagramFailureNtf","DatagramProgressNtf","ParamChangeNtf","RefuseRsp","FailureNtf","DatagramTraceReq","RouteDiscoveryReq","RouteTraceReq","RouteDiscoveryNtf","RouteTraceNtf","FecDecodeReq","RxJanusFrameNtf","TxJanusFrameReq","BadFrameNtf","BadRangeNtf","ClearSyncReq","CollisionNtf","RxFrameNtf","RxFrameStartNtf","SyncInfoReq","SyncInfoRsp","TxFrameNtf","TxFrameReq","TxFrameStartNtf","TxRawFrameReq","AddressAllocReq","AddressAllocRsp","AddressResolutionReq","AddressResolutionRsp","RecordBasebandSignalReq","RxBasebandSignalNtf","TxBasebandSignalReq","LinkStatusNtf","RangeNtf","RangeReq","BeaconReq","RespondReq","InterrogationNtf","ReservationAcceptReq","ReservationCancelReq","ReservationReq","ReservationRsp","ReservationStatusNtf","RxAckNtf","TxAckReq","RemoteExecReq","RemoteFailureNtf","RemoteFileGetReq","RemoteFileNtf","RemoteFilePutReq","RemoteSuccessNtf","RemoteTextNtf","RemoteTextReq","AddScheduledSleepReq","GetSleepScheduleReq","RemoveScheduledSleepReq","SleepScheduleRsp","WakeFromSleepNtf","ClearStateReq","SaveStateReq","_initConv","lat","rlat","PI","yScale","cos","CachingAgentID","greedy","cache","specialParams","_updateCache","maxage","_isCached","_getCache","Set","r","_toNamed","vals","every","c","ctime","Date","now","lastIndexOf","slice","caching","path","localProtocol","remoteProtocol","provider","isClosed","unbind","isBound","connect","to","disconnect","isConnected","getLocalAddress","nodeinfo","addr","getLocalProtocol","getRemoteAddress","getRemoteProtocol","ms","getTimeout","req","getGateway","svc","nodeName","arp","address","origin","y","coords","xScale","lon","pos"],"mappings":"4OAEA,MAAMA,EACc,oBAAXC,aAAqD,IAApBA,OAAOC,SAE3CC,EACe,oBAAZC,SACa,MAApBA,QAAQC,UACiB,MAAzBD,QAAQC,SAASC,KAEbC,EACY,iBAATC,MACPA,KAAKC,aACqB,+BAA1BD,KAAKC,YAAYC,KAMbC,EACe,oBAAXV,QAA0C,WAAhBA,OAAOS,MACnB,oBAAdE,YACLA,UAAUC,UAAUC,SAAS,YAC5BF,UAAUC,UAAUC,SAAS,UAEnB,oBAATC,WACmB,IAAjBA,KAAKC,SACLD,KAAKC,QAAQC,KAEtB,MAAMC,EAAc,OACdC,EAAiB,UAGvB,IAAIC,EAMJ,MAAMC,EAWJ,WAAAZ,CAAYa,EAAO,IACjBC,KAAKC,IAAM,IAAIC,IAAI,mBACnB,IAAIC,EAAOJ,EAAKK,UAAY,YACxBC,EAAON,EAAKM,OAAS,EACzBL,KAAKC,IAAIG,SAAWD,EACpBH,KAAKC,IAAII,KAAOA,EAChBL,KAAKM,KAAO,GACZN,KAAKO,eAAiBR,EAAKS,eA1BE,IA2B7BR,KAAKS,WAAaV,EAAKW,YAAa,EACpCV,KAAKW,YAAa,EAClBX,KAAKY,cAAe,EACpBZ,KAAKa,cAAgB,GACrBb,KAAKc,cAAgB,GACrBd,KAAKe,UAAUZ,EAAME,EACtB,CAGD,cAAAW,CAAeC,GACbjB,KAAKc,cAAcI,SAAQC,IACzBA,GAA6B,sBAAxB,CAAA,EAAGC,SAASC,KAAKF,IAA8BA,EAAEF,EAAI,GAE7D,CAED,SAAAF,CAAUZ,EAAME,GACd,GAAKR,EAUHG,KAAKsB,WAAWnB,EAAME,QATtB,IACEkB,OAAO,OAAOC,MAAKC,IACjB5B,EAAmB4B,EAAO5B,iBAC1BG,KAAKsB,WAAWnB,EAAME,EAAK,GAE9B,CAAA,MAAMqB,GACF1B,KAAK2B,OAAOC,QAAQC,IAAI,8BAC5B,CAIJ,CAED,UAAAP,CAAWnB,EAAME,GACf,GAAIR,EACJ,IACEG,KAAK8B,KAAOjC,EAAiB,CAAEM,KAAQA,EAAME,KAAQA,IACrDL,KAAK8B,KAAKC,YAAY,QACtB/B,KAAK8B,KAAKE,GAAG,UAAWhC,KAAKiC,YAAYC,KAAKlC,OAC9CA,KAAK8B,KAAKE,GAAG,QAAShC,KAAKmC,eAAeD,KAAKlC,OAC/CA,KAAK8B,KAAKE,GAAG,SAAS,KAAOhC,KAAKgB,gBAAe,EAAM,IACvDhB,KAAK8B,KAAKM,KAAOC,IAASrC,KAAK8B,KAAKQ,MAAMD,EAAK,CAChD,CAAC,MAAOX,GAEP,YADG1B,KAAK2B,OAAOC,QAAQC,IAAI,wBAAyB7B,KAAK8B,KAAK3B,KAAO,IAAMH,KAAK8B,KAAKzB,MAEtF,CACF,CAED,cAAA8B,IACMnC,KAAKW,YAAeX,KAAKS,YAAcT,KAAK8B,KAAKS,YAAc3C,GAAkBI,KAAK8B,KAAKS,YAAc5C,IACzGK,KAAKY,cAAcZ,KAAKgB,gBAAe,GAC3ChB,KAAKY,cAAe,EACpB4B,YAAW,KACTxC,KAAKa,cAAgB,GACrBb,KAAKsB,WAAWtB,KAAKC,IAAIG,SAAUJ,KAAKC,IAAII,KAAK,GAChDL,KAAKO,gBACT,CAED,WAAA0B,GACEjC,KAAKgB,gBAAe,GACpBhB,KAAKW,YAAa,EAClBX,KAAK8B,KAAKE,GAAG,QAAShC,KAAKmC,eAAeD,KAAKlC,OAC/CA,KAAK8B,KAAKE,GAAG,OAAQhC,KAAKyC,iBAAiBP,KAAKlC,OAChDA,KAAKa,cAAcK,SAAQwB,GAAMA,MACjC1C,KAAKa,cAAc8B,OAAS,EAC5B3C,KAAKM,KAAO,EACb,CAED,gBAAAmC,CAAiBG,GACf5C,KAAKM,MAAQsC,EACb,IAAIC,EAAQ7C,KAAKM,KAAKwC,MAAM,MAC5BD,EAAM3B,SAAQ,CAACC,EAAG4B,KACZA,EAAMF,EAAMF,OAAO,EACjBxB,GAAKnB,KAAKgD,WAAWhD,KAAKgD,UAAU3B,KAAKrB,KAAKmB,GAElDnB,KAAKM,KAAOa,CACb,GAEJ,CAED,QAAAC,GACE,IAAIwB,EAAI,GAER,OADAA,IAAwB5C,KAAK8B,KAAO9B,KAAK8B,KAAKmB,cAAc7B,WAAa,IAAMpB,KAAK8B,KAAKoB,WAAW9B,YAC7FwB,CACR,CAOD,KAAAN,CAAMM,GACJ,OAAK5C,KAAK8B,MAAQ9B,KAAK8B,KAAKS,YAAc3C,EAK/BI,KAAK8B,KAAKS,YAAc5C,IACjCK,KAAK8B,KAAKM,KAAKQ,EAAE,OACV,IANP5C,KAAKa,cAAcsC,MAAK,KACtBnD,KAAK8B,KAAKM,KAAKQ,EAAE,KAAK,KAEjB,EAMV,CAMD,eAAAQ,CAAgBV,GACVA,GAA+B,sBAAzB,GAAGtB,SAASC,KAAKqB,KAA6B1C,KAAKgD,UAAYN,EAC1E,CAYD,qBAAAW,CAAsBC,GACpBtD,KAAKc,cAAcqC,KAAKG,EACzB,CAOD,wBAAAC,CAAyBD,GACvB,IAAIE,EAAMxD,KAAKc,cAAc2C,QAAQH,GACrC,OAAIE,GAAO,IACTxD,KAAKc,cAAc4C,OAAOF,EAAK,IACxB,EAGV,CAKD,KAAAG,GACO3D,KAAK8B,OACN9B,KAAK8B,KAAKS,YAAc3C,EAC1BI,KAAKa,cAAcsC,MAAK,KACtBnD,KAAK8B,KAAKM,KAAK,sBACfpC,KAAK8B,KAAK8B,mBAAmB,WAC7B5D,KAAK8B,KAAK8B,mBAAmB,SAC7B5D,KAAK8B,KAAK8B,mBAAmB,SAC7B5D,KAAK8B,KAAK+B,SAAS,IAEZ7D,KAAK8B,KAAKS,YAAc5C,IACjCK,KAAK8B,KAAKM,KAAK,sBACfpC,KAAK8B,KAAK8B,mBAAmB,WAC7B5D,KAAK8B,KAAK8B,mBAAmB,SAC7B5D,KAAK8B,KAAK8B,mBAAmB,SAC7B5D,KAAK8B,KAAK+B,WAEb,EASH,MAAMC,EAWJ,WAAA5E,CAAYa,EAAO,IACjBC,KAAKC,IAAM,IAAIC,IAAI,kBACnBF,KAAKC,IAAIG,SAAWL,EAAKK,SACzBJ,KAAKC,IAAII,KAAON,EAAKM,KACrBL,KAAKC,IAAI8D,SAAWhE,EAAKgE,SACzB/D,KAAKO,eAAiBR,EAAKS,eAtBA,IAuB3BR,KAAKS,WAAaV,EAAKW,YAAa,EACpCV,KAAK2B,MAAQ5B,EAAK4B,QAAS,EAC3B3B,KAAKW,YAAa,EAClBX,KAAKY,cAAe,EACpBZ,KAAKa,cAAgB,GACrBb,KAAKc,cAAgB,GACrBd,KAAKgE,cAAchE,KAAKC,IACzB,CAED,cAAAe,CAAeC,GACbjB,KAAKc,cAAcI,SAAQC,IACzBA,GAA6B,sBAAxB,CAAA,EAAGC,SAASC,KAAKF,IAA8BA,EAAEF,EAAI,GAE7D,CAED,aAAA+C,CAAc/D,GACZ,IACED,KAAK8B,KAAO,IAAImC,UAAUhE,GAC1BD,KAAK8B,KAAKoC,QAAUlE,KAAKmE,kBAAkBjC,KAAKlC,MAChDA,KAAK8B,KAAKsC,OAASpE,KAAKqE,eAAenC,KAAKlC,MAC5CA,KAAK8B,KAAKwC,QAAU,KAAOtE,KAAKgB,gBAAe,EAAM,CACtD,CAAC,MAAOU,GAEP,YADG1B,KAAK2B,OAAOC,QAAQC,IAAI,wBAAyB5B,GAErD,CACF,CAED,iBAAAkE,IACMnE,KAAKW,YAAeX,KAAKS,YAAcT,KAAK8B,KAAKS,YAAcvC,KAAK8B,KAAKyC,YAAcvE,KAAK8B,KAAKS,YAAcvC,KAAK8B,KAAK0C,OACzHxE,KAAKY,cAAcZ,KAAKgB,gBAAe,GAC3ChB,KAAKY,cAAe,EACjBZ,KAAK2B,OAAOC,QAAQC,IAAI,mBAAoB7B,KAAK8B,KAAK7B,KACzDuC,YAAW,KACTxC,KAAKa,cAAgB,GACrBb,KAAKgE,cAAchE,KAAK8B,KAAK7B,IAAI,GAChCD,KAAKO,gBACT,CAED,cAAA8D,GACKrE,KAAK2B,OAAOC,QAAQC,IAAI,gBAAiB7B,KAAK8B,KAAK7B,KACtDD,KAAKgB,gBAAe,GACpBhB,KAAK8B,KAAKwC,QAAUtE,KAAKmE,kBAAkBjC,KAAKlC,MAChDA,KAAK8B,KAAK2C,UAAYC,IAAe1E,KAAK2E,cAAc3E,KAAK2E,aAAatD,KAAKrB,KAAK0E,EAAMrC,KAAK,EAC/FrC,KAAKW,YAAa,EAClBX,KAAKY,cAAe,EACpBZ,KAAKa,cAAcK,SAAQwB,GAAMA,MACjC1C,KAAKa,cAAc8B,OAAS,CAC7B,CAED,QAAAvB,GACE,IAAIwB,EAAI,GAER,OADAA,IAAuB5C,KAAK8B,KAAO9B,KAAK8B,KAAK7B,IAAImB,YAC1CwB,CACR,CAMD,KAAAN,CAAMM,GACJ,OAAK5C,KAAK8B,MAAQ9B,KAAK8B,KAAKS,YAAcvC,KAAK8B,KAAKyC,WAKzCvE,KAAK8B,KAAKS,YAAcvC,KAAK8B,KAAK0C,OAC3CxE,KAAK8B,KAAKM,KAAKQ,EAAE,OACV,IANP5C,KAAKa,cAAcsC,MAAK,KACtBnD,KAAK8B,KAAKM,KAAKQ,EAAE,KAAK,KAEjB,EAMV,CAOD,eAAAQ,CAAgBV,GACVA,GAA+B,sBAAzB,GAAGtB,SAASC,KAAKqB,KAA6B1C,KAAK2E,aAAejC,EAC7E,CAYD,qBAAAW,CAAsBC,GACpBtD,KAAKc,cAAcqC,KAAKG,EACzB,CAOD,wBAAAC,CAAyBD,GACvB,IAAIE,EAAMxD,KAAKc,cAAc2C,QAAQH,GACrC,OAAIE,GAAO,IACTxD,KAAKc,cAAc4C,OAAOF,EAAK,IACxB,EAGV,CAKD,KAAAG,GACO3D,KAAK8B,OACN9B,KAAK8B,KAAKS,YAAcvC,KAAK8B,KAAKyC,WACpCvE,KAAKa,cAAcsC,MAAK,KACtBnD,KAAK8B,KAAKM,KAAK,sBACfpC,KAAK8B,KAAKwC,QAAU,KACpBtE,KAAK8B,KAAK6B,OAAO,IAEV3D,KAAK8B,KAAKS,YAAcvC,KAAK8B,KAAK0C,OAC3CxE,KAAK8B,KAAKM,KAAK,sBACfpC,KAAK8B,KAAKwC,QAAU,KACpBtE,KAAK8B,KAAK6B,SAEb,EAMH,MAOMiB,EAAe,CACnBC,QAAS,UACTC,MAAO,QACPC,OAAQ,SACRC,QAAS,UACTC,OAAQ,SACRC,QAAS,UACTC,WAAY,aACZC,SAAU,WACVC,eAAgB,iBAChBC,IAAK,MACLC,QAAS,UACTC,OAAQ,UAUV,MAAMC,EAGJ,WAAAvG,CAAYC,EAAMuG,EAAOC,GACvB3F,KAAKb,KAAOA,EACZa,KAAK0F,MAAQA,EACb1F,KAAK2F,MAAQA,CACd,CAOD,OAAAC,GACE,OAAO5F,KAAKb,IACb,CAOD,OAAA0G,GACE,OAAO7F,KAAK0F,KACb,CAQD,IAAAtD,CAAK0D,GACHA,EAAIC,UAAY/F,KAAKgG,SACrBhG,KAAK2F,MAAMvD,KAAK0D,EACjB,CASD,aAAMG,CAAQH,EAAKI,EAAQ,KAEzB,OADAJ,EAAIC,UAAY/F,KAAKgG,SACdhG,KAAK2F,MAAMM,QAAQH,EAAKI,EAChC,CAOD,QAAA9E,GACE,OAAOpB,KAAKgG,UAAahG,KAAK2F,OAAS3F,KAAK2F,MAAMQ,UAAa,OAAOnG,KAAK2F,MAAMQ,UAAUlG,MAAQ,GACpG,CAOD,MAAA+F,GACE,OAAQhG,KAAK0F,MAAQ,IAAM,IAAM1F,KAAKb,IACvC,CAWD,SAAMiH,CAAKC,EAAQC,EAAQC,GAAM,EAAIL,EAAQ,KAC3C,IAAKG,EAAQ,OAAO,KACpB,IAAIP,EAAM,IAAIU,EACdV,EAAIC,UAAY/F,KAAKb,KACjBsH,MAAMC,QAAQL,IAChBP,EAAIa,MAAQN,EAAOO,QACnBd,EAAIe,MAAQP,EAAOM,QACnBd,EAAIgB,SAAWT,EAAOU,KAAI,CAACC,EAAGC,KACrB,CACLN,MAASK,EACTH,MAASP,EAAOW,OAIpBZ,EAAOa,QAAQpB,EAAIa,SAEnBb,EAAIa,MAAQN,EACZP,EAAIe,MAAQP,GAEdR,EAAIS,MAAQY,OAAOC,UAAUb,GAASA,GAAS,EAC/C,MAAMc,QAAYrH,KAAK2F,MAAMM,QAAQH,EAAKI,GAC1C,IAAIoB,EAAMb,MAAMC,QAAQL,GAAU,IAAII,MAAMJ,EAAO1D,QAAQ4E,KAAK,MAAQ,KACxE,IAAKF,GAAOA,EAAIG,MAAQ5C,EAAaK,SAAWoC,EAAIV,MAAO,OAAOW,EAClE,GAAIb,MAAMC,QAAQL,GAAS,CACpBgB,EAAIf,SAAQe,EAAIf,OAAS,CAAA,GAC1Be,EAAIV,QAAOU,EAAIf,OAAOe,EAAIV,OAASU,EAAIR,OAC3C,MAAMY,EAAQC,OAAOC,KAAKN,EAAIf,QAC9B,OAAOD,EAAOU,KAAKC,IACjB,IAAIY,EAAIH,EAAMI,MAAKC,GAAMA,EAAGC,SAASf,KACrC,OAAOY,EAAIP,EAAIf,OAAOsB,GAAK,IAAI,GAEvC,CACM,OAAOP,EAAIR,KAEd,CAWD,SAAMmB,CAAI3B,EAAQE,GAAM,EAAIL,EAAQ,KAClC,IAAIJ,EAAM,IAAIU,EACdV,EAAIC,UAAY/F,KAAKb,KACjBkH,IACEI,MAAMC,QAAQL,IAChBP,EAAIa,MAAQN,EAAOO,QACnBd,EAAIgB,SAAWT,EAAOU,KAAIC,IAAa,CAACL,MAASK,MAEjDX,EAAOa,QAAQpB,EAAIa,QAEhBb,EAAIa,MAAQN,GAEnBP,EAAIS,MAAQY,OAAOC,UAAUb,GAASA,GAAS,EAC/C,MAAMc,QAAYrH,KAAK2F,MAAMM,QAAQH,EAAKI,GAC1C,IAAIoB,EAAMb,MAAMC,QAAQL,GAAU,IAAII,MAAMJ,EAAO1D,QAAQ4E,KAAK,MAAQ,KACxE,IAAKF,GAAOA,EAAIG,MAAQ5C,EAAaK,QAAWoB,IAAYgB,EAAIV,MAAS,OAAOW,EAEhF,GAAKjB,EAIE,IAAII,MAAMC,QAAQL,GAAS,CAC3BgB,EAAIf,SAAQe,EAAIf,OAAS,CAAA,GAC1Be,EAAIV,QAAOU,EAAIf,OAAOe,EAAIV,OAASU,EAAIR,OAC3C,MAAMY,EAAQC,OAAOC,KAAKN,EAAIf,QAC9B,OAAOD,EAAOU,KAAIC,IAChB,IAAIY,EAAIH,EAAMI,MAAKC,GAAMA,EAAGC,SAASf,KACrC,OAAOY,EAAIP,EAAIf,OAAOsB,GAAK,IAAI,GAEvC,CACM,OAAOP,EAAIR,KACZ,CAXC,OAFKQ,EAAIf,SAAQe,EAAIf,OAAS,CAAA,GAC1Be,EAAIV,QAAOU,EAAIf,OAAOe,EAAIV,OAASU,EAAIR,OACpCQ,EAAIf,MAYd,EASH,MAAM2B,EAEJ,WAAA/I,CAAYgJ,EAAU,CAACC,MAAM,KAAMC,OAAO,MAAOZ,EAAK,IACpDxH,KAAKqI,UAAY,wBACjBrI,KAAKmI,MAAQG,EAAM,GACnBtI,KAAKoI,OAAS,KACdpI,KAAK+F,UAAYmC,EAAUE,OAC3BpI,KAAKwH,KAAOA,EACZxH,KAAKkI,UAAYA,EAAUC,OAAS,IACrC,CAOD,QAAA/G,GACE,IAAIwB,EAAI,GACJ2F,EAAS,GACb,IAAKvI,KAAKqI,UAAW,MAAO,GAC5B,IAAIG,EAAQxI,KAAKqI,UACjBG,EAAQA,EAAMC,QAAQ,QAAS,IAC/B,IAAIjB,EAAOxH,KAAKwH,KAChB,IAAK,IAAIkB,KAAK1I,KACR0I,EAAEC,WAAW,OACR,UAALD,GACK,aAALA,GACK,SAALA,GACK,QAALA,GACK,aAALA,IACkB,iBAAX1I,KAAK0I,GAIhB9F,GAAK,IAAM8F,EAAI,IAAM1I,KAAK0I,GAHxBH,EAAS,QAMb,OADA3F,GAAK2F,EACEC,EAAM,IAAIhB,EAAK,IAAI5E,EAAE6F,QAAQ,KAAM,IAAI,GAC/C,CAMD,UAAAG,GAME,MAAO,gBALK5I,KAAKqI,WAAa,yBAKF,cAJjBQ,KAAKC,UAAU9I,MAAM,CAAC0I,EAAEK,KACjC,IAAIL,EAAEC,WAAW,MACjB,OAAOI,CAAC,IAEqC,IAChD,CAID,QAAAC,CAAS3G,GACP,IAAK,IAAI4G,KAAO5G,EACdrC,KAAKiJ,GAAO5G,EAAK4G,EACpB,CAID,mBAAOC,CAAaC,GAClB,GAAkB,iBAAPA,GAAmBA,aAAeC,OAC3C,IACED,EAAMN,KAAKQ,MAAMF,EAClB,CAAA,MAAMG,GACL,OAAO,IACR,CAEH,IAAIC,EAASJ,EAAIX,MACbA,EAAQe,EAAOd,QAAQ,QAAS,IAChCX,EAAK0B,EAAahB,GAAS,IAAIgB,EAAahB,GAAS,IAAIP,EAG7D,OAFAH,EAAGO,UAAYkB,EACfzB,EAAGkB,SAASG,EAAI9G,MACTyF,CACR,EAoCH,MAAM2B,EAEJ,WAAAvK,CAAYa,EAAO,GAAIM,EAAM0D,EAAS,OAAQmC,EAAQ,MAEhC,iBAATnG,GAAqBA,aAAgBqJ,UAC9CrJ,EAAO,CACLK,SAAYL,EACZM,KAASA,GAAQqJ,EAAKC,SAAStJ,KAC/B0D,SAAaA,EACbmC,QAAYA,GAEdtE,QAAQgI,KAAK,0CAEf7J,EAAO2H,OAAOmC,OAAO,CAAE,EAAEC,EAAkB/J,GAC3C,IAAIE,EAAM8J,EACV9J,EAAIG,SAAWL,EAAKK,SACpBH,EAAII,KAAON,EAAKM,KAChBJ,EAAI8D,SAAWhE,EAAKgE,SACpB,IAAIiG,EAAWhK,KAAKiK,YAAYhK,GAChC,GAAI+J,EAAU,OAAOA,EACrBhK,KAAKkK,SAAWnK,EAAKmG,QACrBlG,KAAKS,WAAaV,EAAKW,UACvBV,KAAKmK,WAAapK,EAAKqK,UACvBpK,KAAKqK,QAAU,GACfrK,KAAKsK,cAAgB,GACrBtK,KAAKsD,SAAW,GAChBtD,KAAKuK,eAAiB,GACtBvK,KAAKwK,MAAQ,GACbxK,KAAK2B,OAAQ,EACb3B,KAAKyK,IAAM,IAAIhF,GAAShH,EAAY,SAAW,WAAW6J,EAAM,IAChEtI,KAAKmG,UAAYnG,KAAK0K,iBAAiBzK,GACvCD,KAAK2K,YAAY3K,KAClB,CAGD,UAAA4K,CAAWC,EAAM5J,GACXwF,MAAMC,QAAQ1G,KAAKuK,eAAeM,KACpC7K,KAAKuK,eAAeM,GAAM3J,SAAQC,IAChC,GAAIA,GAA6B,sBAAxB,CAAA,EAAGC,SAASC,KAAKF,GACxB,IACEA,EAAEF,EACH,CAAC,MAAOS,GACPE,QAAQgI,KAAK,6BAA+BlI,EAC7C,CACF,GAGN,CAGD,QAAAoJ,CAASzI,GACP,IAAI8G,EACAnJ,KAAK2B,OAAOC,QAAQC,IAAI,KAAKQ,GACjCrC,KAAK4K,WAAW,KAAMvI,GACtB,IACE8G,EAAMN,KAAKQ,MAAMhH,EAAM0I,EACxB,CAAA,MAAMzB,GACL,MACD,CAED,GADAtJ,KAAK4K,WAAW,MAAOzB,GACnB,OAAQA,GAAOA,EAAI6B,MAAMhL,KAAKqK,QAEhCrK,KAAKqK,QAAQlB,EAAI6B,IAAI7B,UACdnJ,KAAKqK,QAAQlB,EAAI6B,SACnB,GAAkB,QAAd7B,EAAI8B,OAAkB,CAE/B,IAAInF,EAAMmC,EAAQiB,aAAaC,EAAI+B,SACnC,IAAKpF,EAAK,OAEV,GADA9F,KAAK4K,WAAW,QAAS9E,GACpBA,EAAIC,WAAa/F,KAAKyK,IAAIzE,UAAahG,KAAKsK,cAAcxE,EAAIC,WAAY,CAC7E,IAAIoF,GAAW,EACf,GAAI1E,MAAMC,QAAQ1G,KAAKuK,eAAwB,SAC7C,IAAK,IAAItD,EAAI,EAAGA,EAAIjH,KAAKuK,eAAwB,QAAE5H,OAAQsE,IACzD,IACE,GAAIjH,KAAKuK,eAAwB,QAAEtD,GAAGnB,GAAM,CAC1CqF,GAAW,EACX,KACD,CACF,CAAC,MAAOzJ,GACPE,QAAQgI,KAAK,+BAAiClI,EAC/C,CAIL,IAAK,IAAIuH,KAAOjJ,KAAKsD,SAEnB,IACE,GAAItD,KAAKsD,SAAS2F,GAAKnD,GAAM,CAC3BqF,GAAW,EACX,KACD,CACF,CAAC,MAAOzJ,GACPE,QAAQgI,KAAK,uBAAyBlI,EACvC,CAECyJ,IACEnL,KAAKwK,MAAM7H,QAAU3C,KAAKmK,YAAYnK,KAAKwK,MAAM5D,QACrD5G,KAAKwK,MAAMrH,KAAK2C,GAEnB,CACP,KAAW,CAEL,IAAIuB,EAAM,CAAE2D,GAAI7B,EAAI6B,GAAII,aAAcjC,EAAI8B,QAC1C,OAAQ9B,EAAI8B,QACZ,IAAK,SACH5D,EAAIgE,SAAW,CAACrL,KAAKyK,IAAI7E,WACzB,MACF,IAAK,gBACHyB,EAAIiE,OAAUnC,EAAIoC,SAAWvL,KAAKyK,IAAI7E,UACtC,MACF,IAAK,WACHyB,EAAImE,SAAW,GACf,MACF,IAAK,kBACHnE,EAAIkE,QAAU,GACd,MACF,IAAK,mBACHlE,EAAIgE,SAAW,GACf,MACF,QACEhE,OAAMoE,EAEJpE,GAAKrH,KAAK0L,OAAOrE,EACtB,CACF,CAGD,MAAAqE,CAAO9I,GAIL,MAHgB,iBAALA,GAAmBA,aAAawG,SAASxG,EAAIiG,KAAKC,UAAUlG,IACpE5C,KAAK2B,OAAOC,QAAQC,IAAI,KAAKe,GAChC5C,KAAK4K,WAAW,KAAMhI,GACf5C,KAAKmG,UAAU7D,MAAMM,EAC7B,CAGD,QAAA+I,CAASC,GAEP,OADAA,EAAGZ,GAAK1C,EAAM,GACP,IAAIuD,SAAQC,IACjB,IAAIC,EAAQvJ,YAAW,YACdxC,KAAKqK,QAAQuB,EAAGZ,IACnBhL,KAAK2B,OAAOC,QAAQC,IAAI,qBAAuB+J,GACnDE,GAAS,GACR,EAAE9L,KAAKkK,UACVlK,KAAKqK,QAAQuB,EAAGZ,IAAM3D,IACpB2E,aAAaD,GACbD,EAAQzE,EAAI,EAETrH,KAAK0L,OAAOrK,KAAKrB,KAAK4L,KACzBI,aAAaD,UACN/L,KAAKqK,QAAQuB,EAAGZ,IACnBhL,KAAK2B,OAAOC,QAAQC,IAAI,sBAAwB+J,GACpDE,IACD,GAEJ,CAGD,gBAAApB,CAAiBzK,GACf,IAAIgM,EACJ,GAAIhM,EAAIiM,SAASvD,WAAW,MAC1BsD,EAAQ,IAAInI,EAAY,CACtB1D,SAAWH,EAAIG,SACfC,KAAOJ,EAAII,KACX0D,SAAW9D,EAAI8D,SACfrD,UAAaV,KAAKS,iBAEhB,KAAIR,EAAIiM,SAASvD,WAAW,OAM3B,OAAO,KALZsD,EAAO,IAAInM,EAAa,CACtBM,SAAWH,EAAIG,SACfC,KAAOJ,EAAII,KACXK,UAAaV,KAAKS,YAEJ,CAUlB,OATAwL,EAAK7I,gBAAgBpD,KAAK8K,SAAS5I,KAAKlC,OACxCiM,EAAK5I,uBAAsB8I,IACZ,GAATA,IACFnM,KAAKoM,QACLpM,KAAKmG,UAAU7D,MAAM,mBACrBtC,KAAKqM,iBAEPrM,KAAK4K,WAAW,OAAQuB,EAAM,IAEzBF,CACR,CAGD,aAAAK,CAAcC,EAAQzG,GACpB,GAAqB,iBAAVyG,GAAsBA,aAAkBnD,OACjD,MAAO,cAAetD,GAAOA,EAAIoC,WAAaqE,EACzC,GAAI7E,OAAO8E,UAAUC,eAAepL,KAAKkL,EAAQ,SACtD,MAAO,cAAezG,GAAOA,EAAIoC,WAAaqE,EAAOpE,MAChD,GAA6B,WAAzBoE,EAAOG,UAAUvN,MAAwD,WAAnCoN,EAAOG,UAAUA,UAAUvN,KAC1E,OAAOoN,EAAOlE,WAAavC,EAAIuC,UAC1B,GAAqB,mBAAVkE,EAQhB,OAAOzG,aAAeyG,EAPtB,IACE,OAAOA,EAAOzG,EACf,CAAA,MAAMwD,GAEL,OADA1H,QAAQgI,KAAK,qBAAuBN,IAC7B,CACR,CAIJ,CAGD,oBAAAqD,CAAqBJ,GACnB,IAAKvM,KAAKwK,MAAM7H,OAAQ,OACxB,IAAK4J,EAAQ,OAAOvM,KAAKwK,MAAM5D,QAE/B,IAAIgG,EAAa5M,KAAKwK,MAAM3C,MAAM/B,GAAO9F,KAAKsM,cAAcC,EAAQzG,KAGpE,OAFI8G,GAAY5M,KAAKwK,MAAM9G,OAAO1D,KAAKwK,MAAM/G,QAAQmJ,GAAa,GAE3DA,CACR,CAGD,WAAA3C,CAAYhK,GACV,IAAKyJ,EAAKmD,QAAUnD,EAAKmD,MAAMC,SAAU,OAAO,KAChD,IAAIlF,EAAI8B,EAAKmD,MAAMC,SAASP,QAAOQ,GAAKA,EAAE5G,UAAUlG,IAAImB,YAAcnB,EAAImB,aAC1E,OAAIwG,EAAEjF,OAAgBiF,EAAE,GACjB,IACR,CAGD,WAAA+C,CAAYqC,GACLtD,EAAKmD,OAAUnD,EAAKmD,MAAMC,UAC/BpD,EAAKmD,MAAMC,SAAS3J,KAAK6J,EAC1B,CAGD,cAAAC,CAAeD,GACb,GAAKtD,EAAKmD,OAAUnD,EAAKmD,MAAMC,SAA/B,CACA,IAAIvG,EAAQmD,EAAKmD,MAAMC,SAASrJ,QAAQuJ,GAC3B,MAATzG,GAAemD,EAAKmD,MAAMC,SAASpJ,OAAO6C,EAAM,EAFJ,CAGjD,CAGD,aAAA8F,GAQC,CASD,gBAAAa,CAAiBrC,EAAMvH,GAChBmD,MAAMC,QAAQ1G,KAAKuK,eAAeM,MACrC7K,KAAKuK,eAAeM,GAAQ,IAE9B7K,KAAKuK,eAAeM,GAAM1H,KAAKG,EAChC,CASD,mBAAA6J,CAAoBtC,EAAMvH,GACxB,IAAKtD,KAAKuK,eAAeM,GAAO,OAChC,IAAIrH,EAAMxD,KAAKuK,eAAeM,GAAMpH,QAAQH,GACxCE,GAAO,GAAGxD,KAAKuK,eAAeM,GAAMnH,OAAOF,EAAK,EACrD,CAQD,kBAAA4J,CAAmB9J,GACjBtD,KAAKkN,iBAAiB,UAAU5J,EACjC,CAQD,qBAAA+J,CAAsB/J,GACpBtD,KAAKmN,oBAAoB,UAAW7J,EACrC,CAQD,eAAAgK,CAAgBhK,GACdtD,KAAKkN,iBAAiB,OAAQ5J,EAC/B,CAQD,kBAAAiK,CAAmBjK,GACjBtD,KAAKmN,oBAAoB,OAAQ7J,EAClC,CAOD,UAAAkK,GACE,OAAOxN,KAAKyK,GACb,CAQD,KAAAgD,CAAMtO,GACJ,OAAO,IAAIsG,EAAQtG,GAAM,EAAOa,KACjC,CASD,KAAA0F,CAAMA,EAAOgI,GACX,MAAoB,iBAAThI,GAAqBA,aAAiB0D,OAAe,IAAI3D,EAAQC,GAAO,EAAM1F,MACrF0F,aAAiBD,EACfC,EAAMG,UAAkBH,EACrB,IAAID,EAAQC,EAAME,WAAW8H,EAAS,KAAOA,EAAS,IAAI,SAAS,EAAM1N,WAFlF,CAID,CAQD,SAAA2N,CAAUjI,GACHA,EAAMG,YAAWH,EAAQ,IAAID,EAAQC,EAAME,UAAY,SAAS,EAAM5F,OAC3EA,KAAKsK,cAAc5E,EAAMM,WAAY,EACrChG,KAAKqM,eACN,CAQD,WAAAuB,CAAYlI,GACLA,EAAMG,YAAWH,EAAQ,IAAID,EAAQC,EAAME,UAAY,SAAS,EAAM5F,cACpEA,KAAKsK,cAAc5E,EAAMM,UAChChG,KAAKqM,eACN,CASD,qBAAMwB,CAAgBC,GACpB,IAAIlC,EAAK,CAAEX,OAAQ,kBAAmB6C,QAASA,GAC3CzG,QAAYrH,KAAK2L,SAASC,GAC9B,GAAKvE,GAAQA,EAAIkE,QACjB,OAAO,IAAI9F,EAAQ4B,EAAIkE,SAAS,EAAOvL,KACxC,CAQD,sBAAM+N,CAAiBD,GACrB,IAAIlC,EAAK,CAAEX,OAAQ,mBAAoB6C,QAASA,GAC5CzG,QAAYrH,KAAK2L,SAASC,GAC1BoC,EAAO,GACX,IAAK3G,IAAQZ,MAAMC,QAAQW,EAAIgE,UAAW,OAAO2C,EACjD,IAAK,IAAI/G,EAAI,EAAGA,EAAII,EAAIgE,SAAS1I,OAAQsE,IACvC+G,EAAK7K,KAAK,IAAIsC,EAAQ4B,EAAIgE,SAASpE,IAAI,EAAOjH,OAChD,OAAOgO,CACR,CASD,IAAA5L,CAAK0D,GACHA,EAAIsC,OAASpI,KAAKyK,IAAIzE,SACN,IAAZF,EAAI0B,OACF1B,EAAIuC,UAAUN,SAAS,OAAQjC,EAAI0B,KAAO5C,EAAaC,QACtDiB,EAAI0B,KAAO5C,EAAaK,QAE/BjF,KAAK4K,WAAW,QAAS9E,GACzB,IAAI8F,EAAK/C,KAAKC,UAAU,CAAEmC,OAAQ,OAAQgD,OAAO,EAAM/C,QAAS,cAEhE,OADAU,EAAKA,EAAGnD,QAAQ,cAAe3C,EAAI8C,gBAC1B5I,KAAK0L,OAAOE,EACtB,CAOD,KAAAQ,GACEpM,KAAKwK,MAAM7H,OAAS,CACrB,CAUD,aAAMsD,CAAQH,EAAKI,EAAQ,KAEzB,OADAlG,KAAKoC,KAAK0D,GACH9F,KAAKkO,QAAQpI,EAAKI,EAC1B,CAWD,aAAMgI,CAAQ3B,EAAQrG,EAAQ,GAC5B,OAAO,IAAI2F,SAAQC,IACjB,IAAIhG,EAAM9F,KAAK2M,qBAAqBtL,KAAKrB,KAAKuM,GAC9C,GAAIzG,EAEF,YADAgG,EAAQhG,GAGV,GAAe,GAAXI,EAGF,OAFIlG,KAAK2B,OAAOC,QAAQC,IAAI,qBAAuB0K,QACnDT,IAGF,IACIC,EADAoC,EAAM7F,EAAM,GAEZpC,EAAU,IACZ6F,EAAQvJ,YAAW,KACjBxC,KAAKsD,SAAS6K,WAAenO,KAAKsD,SAAS6K,GACvCnO,KAAK2B,OAAOC,QAAQC,IAAI,qBAAuB0K,GACnDT,GAAS,GACR5F,IAELlG,KAAKsD,SAAS6K,GAAOrI,KACd9F,KAAKsM,cAAcC,EAAQzG,KAC7BiG,GAAOC,aAAaD,GACvB/L,KAAKsD,SAAS6K,WAAenO,KAAKsD,SAAS6K,GAC3CrC,EAAQhG,IACD,EACR,GAEJ,CAOD,KAAAnC,GACE3D,KAAKmG,UAAUxC,QACf3D,KAAKiN,eAAejN,KACrB,EAOE,MAACoO,EAAW,CACfC,MAAQ,sCAYV,SAAS7E,EAAarK,EAAMmP,EAAOrG,GACjC,IAAIsG,EAAQpP,EAAKsJ,QAAQ,QAAS,IAClC,GAAIe,EAAa+E,GAAQ,OAAO/E,EAAa+E,GAC7C,IAAIC,EAAM,cAAcF,EACtB,WAAApP,CAAYmH,GAGV,GAFAoI,QACAzO,KAAKqI,UAAYlJ,EACbkH,EAAO,CACT,MAAMsB,EAAOD,OAAOC,KAAKtB,GACzB,IAAK,IAAIqC,KAAKf,EACZ3H,KAAK0I,GAAKrC,EAAOqC,EAEpB,CACF,GAIH,OAFA8F,EAAInG,UAAYlJ,EAChBqK,EAAa+E,GAASC,EACfA,CACT,CAMA,SAASlG,EAAMoG,GACb,SAASC,IACP,OAAOC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAAqB1N,SAAS,IAAI2N,UAAU,EACzE,CACD,IAAInM,EAAI+L,IACR,IAAK,IAAI1H,EAAI,EAAGA,EAAIyH,EAAI,EAAGzH,IACzBrE,GAAK+L,IACP,OAAO/L,CACT,CA6CA,SAASmI,EAAcrC,EAAGsG,GACxB,GAAU,OAANA,EACF,OAAO,KAET,GAAgB,iBAALA,GAAiB,UAAWA,EAAG,CACxC,IAAIxG,EAAQwG,EAAExG,MACd,GAAIA,EAAMG,WAAW,MAAwB,GAAhBH,EAAM7F,QAAe,SAAUqM,EAAG,CAC7D,IAAIC,EAhDV,SAAqBC,EAAQC,EAAOC,GAAa,GAC/C,IAAIxM,EAAI8G,EAAK2F,KAAKH,GACdR,EAAM9L,EAAED,OACR2M,EAAQ,IAAIC,WAAWb,GAC3B,IAAK,IAAIzH,EAAI,EAAGA,EAAIyH,EAAKzH,IACvBqI,EAAMrI,GAAKrE,EAAE4M,WAAWvI,GAC1B,IAAIa,EAAK,GACL2H,EAAO,IAAIC,SAASJ,EAAMK,QAC9B,OAAQR,GACR,IAAK,KACH,IAAKlI,EAAI,EAAGA,EAAIyH,EAAKzH,IACnBa,EAAG3E,KAAKsM,EAAKG,SAAS3I,IACxB,MACF,IAAK,KACH,IAAKA,EAAI,EAAGA,EAAIyH,EAAKzH,GAAG,EACtBa,EAAG3E,KAAKsM,EAAKI,SAAS5I,EAAGmI,IAC3B,MACF,IAAK,KACH,IAAKnI,EAAI,EAAGA,EAAIyH,EAAKzH,GAAG,EACtBa,EAAG3E,KAAKsM,EAAKK,SAAS7I,EAAGmI,IAC3B,MACF,IAAK,KACH,IAAKnI,EAAI,EAAGA,EAAIyH,EAAKzH,GAAG,EACtBa,EAAG3E,KAAKsM,EAAKM,SAAS9I,EAAGmI,IAC3B,MACF,IAAK,KACH,IAAKnI,EAAI,EAAGA,EAAIyH,EAAKzH,GAAG,EACtBa,EAAG3E,KAAKsM,EAAKO,WAAW/I,EAAGmI,IAC7B,MACF,IAAK,KACH,IAAKnI,EAAI,EAAGA,EAAIyH,EAAKzH,GAAG,EACtBa,EAAG3E,KAAKsM,EAAKQ,WAAWhJ,EAAGmI,IAC7B,MACF,QACE,OAEF,OAAOtH,CACT,CAWcoI,CAAYlB,EAAE3M,KAAM2M,EAAExG,OAC1ByG,IAAGD,EAAIC,EACZ,CACF,CACD,OAAOD,CACT,CAIA,MAAMlF,EAAmB,CAAA,EACzB,IACIC,EADAL,EAAO,CAAA,EAEPjL,GAAaO,GACf0K,EAAOhL,OACPgJ,OAAOmC,OAAOC,EAAkB,CAC9B1J,SAAYsJ,EAAKC,SAASvJ,SAC1BC,KAAQqJ,EAAKC,SAAStJ,KACtB0D,SAAa,OACbmC,QAAW,IACXxF,WAAc,EACd0J,UAx5BuB,MA05BzBL,EAAc,IAAI7J,IAAI,uBAEI,IAAfwJ,EAAKmD,QAAuBnD,EAAKmD,MAAQ,SAClB,IAAvBnD,EAAKmD,MAAMC,WAAwBpD,EAAKmD,MAAMC,SAAW,MAC3D1N,GAAWR,KACpB8K,EAAOyG,OACPzI,OAAOmC,OAAOC,EAAkB,CAC9B1J,SAAY,YACZC,KAAQ,OACR0D,SAAY,GACZmC,QAAW,IACXxF,WAAc,EACd0J,UAt6BuB,MAw6BzBL,EAAc,IAAI7J,IAAI,mBACtBwJ,EAAK2F,KAAOe,GAAKC,OAAOC,KAAKF,EAAG,UAAUhP,SAAS,WAGrD,MAAMoF,EAAegD,EAAa,oCC9xC5B+G,EAAc/G,EAAa,4BAC3BgH,EAAchH,EAAa,4BAC3BiH,EAAiBjH,EAAa,kCAqBpC9B,OAAOmC,OAAOuE,EAnBK,CACjBsC,UAAa,kCACbC,mBAAsB,2CACtBC,SAAY,iCACZC,SAAY,iCACZC,QAAW,gCACXC,SAAY,iCACZC,KAAQ,6BACRC,IAAO,4BACPC,QAAW,gCACXC,kBAAqB,0CACrBC,UAAa,kCACbC,OAAU,+BACVC,cAAiB,sCACjBC,YAAe,oCACfC,IAAO,4BACPC,UAAY,oCASX,IAACC,EAAW,CACbC,KAAS,EACTb,QAAY,EACZE,KAAS,EACTK,OAAW,EACXJ,IAAQ,EACRC,QAAY,EACZE,UAAc,EACdD,kBAAsB,EACtBS,MAAU,EACVC,KAAS,GACTC,IAAQ,IAONC,EAAe,CAEjBC,cAA2BxI,EAAa,8BACxCyI,uBAA2BzI,EAAa,uCACxC0I,kBAA2B1I,EAAa,kCACxC2I,cAA2B3I,EAAa,8BACxC4I,SAA2B5I,EAAa,yBACxC6I,kBAA2B7I,EAAa,kCACxC8I,oBAA2B9I,EAAa,oCACxC+I,mBAA2B/I,EAAa,mCACxCgH,YAA2BhH,EAAa,4BACxCgJ,oBAA2BhJ,EAAa,oCACxC+G,YAA2B/G,EAAa,4BACxCiJ,eAA2BjJ,EAAa,+BACxCkJ,UAA2BlJ,EAAa,0BACxCmJ,WAA2BnJ,EAAa,2BAGxCoJ,iBAA2BpJ,EAAa,qCACxCqJ,kBAA2BrJ,EAAa,sCACxCsJ,cAA2BtJ,EAAa,kCACxCuJ,kBAA2BvJ,EAAa,sCACxCwJ,cAA2BxJ,EAAa,kCAGxCyJ,aAA2BzJ,EAAa,iCACxC0J,gBAA2B1J,EAAa,oCACxC2J,gBAA2B3J,EAAa,oCACxC4J,YAA2B5J,EAAa,gCACxC6J,YAA2B7J,EAAa,gCACxC8J,aAA2B9J,EAAa,iCACxC+J,aAA2B/J,EAAa,iCACxCgK,WAA2BhK,EAAa,8BAA+BgH,GACvEiD,gBAA2BjK,EAAa,oCACxCkK,YAA2BlK,EAAa,gCACxCmK,YAA2BnK,EAAa,gCACxCoK,WAA2BpK,EAAa,+BACxCqK,WAA2BrK,EAAa,8BAA+B+G,GACvEuD,gBAA2BtK,EAAa,oCACxCuK,cAA2BvK,EAAa,kCAGxCwK,gBAA2BxK,EAAa,qCACxCyK,gBAA2BzK,EAAa,qCACxC0K,qBAA2B1K,EAAa,0CACxC2K,qBAA2B3K,EAAa,0CAGxCiH,eAA2BjH,EAAa,kCACxC4K,wBAA4B5K,EAAa,2CACzC6K,oBAA2B7K,EAAa,sCAAuCiH,GAC/E6D,oBAA2B9K,EAAa,sCAAuCiH,GAG/E8D,cAA2B/K,EAAa,mCAGxCgL,SAA2BhL,EAAa,sCACxCiL,SAA2BjL,EAAa,sCACxCkL,UAA2BlL,EAAa,uCACxCmL,WAA2BnL,EAAa,wCACxCoL,iBAA2BpL,EAAa,8CAIxCqL,qBAA2BrL,EAAa,yCACxCsL,qBAA2BtL,EAAa,yCACxCuL,eAA2BvL,EAAa,mCACxCwL,eAA2BxL,EAAa,mCACxCyL,qBAA2BzL,EAAa,yCACxC0L,SAA2B1L,EAAa,6BACxC2L,SAA2B3L,EAAa,6BAIxC4L,cAA2B5L,EAAa,qCACxC6L,iBAA2B7L,EAAa,wCACxC8L,iBAA2B9L,EAAa,wCACxC+L,cAA2B/L,EAAa,qCACxCgM,iBAA2BhM,EAAa,wCACxCiM,iBAA2BjM,EAAa,wCACxCkM,cAA2BlM,EAAa,qCACxCmM,cAA2BnM,EAAa,qCAGxCoM,qBAA2BpM,EAAa,+CACxCqM,oBAA2BrM,EAAa,8CACxCsM,wBAA4BtM,EAAa,kDACzCuM,iBAA2BvM,EAAa,2CACxCwM,iBAA2BxM,EAAa,2CAGxCyM,cAA2BzM,EAAa,oCACxC0M,aAA2B1M,EAAa,oCAkC1C,SAAS2M,EAAUC,GACjB,IAAIC,EAAOD,EAAMxH,KAAK0H,GAAG,IACrBC,EAAS,UAAY,OAAO3H,KAAK4H,IAAI,EAAEH,GAAQ,MAAMzH,KAAK4H,IAAI,EAAEH,GAAQ,MAAOzH,KAAK4H,IAAI,EAAEH,GAE9F,MAAO,CADM,UAAUzH,KAAK4H,IAAIH,GAAQ,KAAKzH,KAAK4H,IAAI,EAAEH,GAAQ,KAAMzH,KAAK4H,IAAI,EAAEH,GACjEE,EAClB,CA4DA,MAAME,UAAuBhR,EAE3B,WAAAvG,CAAYC,EAAMuG,EAAOC,EAAO+Q,GAAO,GACjCvX,aAAgBsG,EAClBgJ,MAAMtP,EAAKyG,UAAWzG,EAAKuG,MAAOvG,EAAKwG,OAEvC8I,MAAMtP,EAAMuG,EAAOC,GAErB3F,KAAK0W,OAASA,EACd1W,KAAK2W,MAAQ,GACb3W,KAAK4W,cAAgB,CAAC,OAAQ,UAC/B,CAWD,SAAMxQ,CAAIC,EAAQC,EAAQC,GAAM,EAAIL,EAAQ,KAC1C,IAAItD,QAAU6L,MAAMrI,IAAIC,EAAQC,EAAQC,EAAOL,GAE/C,OADAlG,KAAK6W,aAAaxQ,EAAQzD,EAAG2D,GACtB3D,CACR,CAWD,SAAMoF,CAAI3B,EAAQE,GAAM,EAAIL,EAAQ,IAAM4Q,EAAO,KAC/C,GAAI9W,KAAK+W,UAAU1Q,EAAQE,EAAOuQ,GAAS,OAAO9W,KAAKgX,UAAU3Q,EAAQE,GACzE,IAAIvG,KAAK0W,QACLjQ,MAAMC,QAAQL,IAAoE,GAAzD,IAAI,IAAI4Q,IAAI,IAAI5Q,KAAWrG,KAAK4W,iBAAiBjU,QAC3E3C,KAAK4W,cAAcrX,SAAS8G,GAczB,CACJ,IAAI6Q,QAAUzI,MAAMzG,IAAI3B,EAAQE,EAAOL,GAEvC,OADAlG,KAAK6W,aAAaxQ,EAAQ6Q,EAAG3Q,GACtB2Q,CACR,CAlBuC,CACtC,IAAI7P,QAAYoH,MAAMzG,IAAI,KAAMzB,EAAOL,GAEvC,GADAlG,KAAK6W,aAAa,KAAMxP,EAAKd,IACxBc,EAAK,OAAOZ,MAAMC,QAAQL,GAAU,IAAII,MAAMJ,EAAO1D,QAAQ4E,KAAK,MAAQ,KAC/E,GAAKlB,EACA,IAAII,MAAMC,QAAQL,GACrB,OAAOA,EAAOU,KAAIC,IAChB,IAAIY,EAAIF,OAAOC,KAAKN,GAAKQ,MAAKC,GAAM9H,KAAKmX,SAASrP,KAAQd,IAC1D,OAAOY,EAAIP,EAAIO,GAAK,IAAI,IAErB,CACL,IAAIA,EAAIF,OAAOC,KAAKN,GAAKQ,MAAKC,GAAM9H,KAAKmX,SAASrP,KAAQzB,IAC1D,OAAOuB,EAAIP,EAAIO,GAAK,IACrB,EATY,OAAOP,CAU1B,CAKG,CAED,YAAAwP,CAAaxQ,EAAQ+Q,EAAM7Q,GACzB,GAAY,MAAR6Q,GAAgB3Q,MAAMC,QAAQ0Q,IAASA,EAAKC,OAAMtO,GAAU,MAALA,IAAY,OACzD,MAAV1C,GACFA,EAASqB,OAAOC,KAAKyP,GACrBA,EAAO1P,OAAOpB,OAAO8Q,IACX3Q,MAAMC,QAAQL,KAASA,EAAS,CAACA,IACxCI,MAAMC,QAAQ0Q,KAAOA,EAAO,CAACA,IAClC/Q,EAASA,EAAOU,IAAI/G,KAAKmX,eACY1L,IAAjCzL,KAAK2W,MAAMpQ,EAAMnF,cAA2BpB,KAAK2W,MAAMpQ,EAAMnF,YAAc,CAAA,GAC/E,IAAIkW,EAAItX,KAAK2W,MAAMpQ,EAAMnF,YACzB,IAAK,IAAI6F,EAAI,EAAGA,EAAIZ,EAAO1D,OAAQsE,SACZwE,IAAjB6L,EAAEjR,EAAOY,MAAmBqQ,EAAEjR,EAAOY,IAAM,IAC/CqQ,EAAEjR,EAAOY,IAAIJ,MAAQuQ,EAAKnQ,GAC1BqQ,EAAEjR,EAAOY,IAAIsQ,MAAQC,KAAKC,KAE7B,CAED,SAAAV,CAAU1Q,EAAQE,EAAOuQ,GACvB,GAAIA,GAAU,EAAG,OAAO,EACxB,GAAc,MAAVzQ,EAAgB,OAAO,EAC3B,IAAIiR,EAAItX,KAAK2W,MAAMpQ,EAAMnF,YACzB,IAAKkW,EACH,OAAO,EAEJ7Q,MAAMC,QAAQL,KAASA,EAAS,CAACA,IAKtC,OAJWA,EAAOgR,OAAMrQ,IACtBA,EAAIhH,KAAKmX,SAASnQ,MACLsQ,GAAOE,KAAKC,MAAQH,EAAEtQ,GAAGuQ,OAAST,GAGlD,CAED,SAAAE,CAAU3Q,EAAQE,GAChB,IAAI+Q,EAAItX,KAAK2W,MAAMpQ,EAAMnF,YACzB,OAAKkW,EACA7Q,MAAMC,QAAQL,GAIVA,EAAOU,KAAIC,GAAKA,KAAKsQ,EAAIA,EAAEtQ,GAAGH,MAAQ,OAHzCR,KAAUiR,EAAUA,EAAEjR,GAAQQ,MAC3B,KAHM,IAOhB,CAED,QAAAsQ,CAASxQ,GACP,MAAM5D,EAAM4D,EAAM+Q,YAAY,KAC9B,OAAI3U,EAAM,EAAU4D,EACRA,EAAMgR,MAAM5U,EAAI,EAC7B,EC3VH,MAEMmR,EAAuBnC,EAAamC,qBACpC3D,EAAcwB,EAAaxB,YAC3BC,EAAcuB,EAAavB,YAC3BgD,EAAazB,EAAayB,2DD2VhC,cAA6B/J,EAU3B,KAAAgE,CAAMtO,EAAMyY,GAAQ,EAAMlB,GAAO,GAC/B,MAAMjM,EAAMgE,MAAMhB,MAAMtO,GACxB,OAAOyY,EAAU,IAAInB,EAAehM,EAAK,KAAM,KAAMiM,GAAUjM,CAChE,CAWD,KAAA/E,CAAMA,EAAOgI,EAAQkK,GAAQ,EAAMlB,GAAO,GACxC,MAAMjM,EAAMgE,MAAM/I,MAAMA,EAAOgI,GAC/B,OAAOkK,EAAU,IAAInB,EAAehM,EAAK,KAAM,KAAMiM,GAAUjM,CAChE,CAWD,qBAAMoD,CAAgBC,EAAS8J,GAAQ,EAAMlB,GAAO,GAClD,MAAMjM,QAAYgE,MAAMZ,gBAAgBC,GACxC,OAAKrD,GACEmN,EAAU,IAAInB,EAAehM,EAAK,KAAM,KAAMiM,GADpCjM,CAElB,CAUD,sBAAMsD,CAAiBD,EAAS8J,GAAQ,EAAMlB,GAAO,GACnD,MAAM1I,QAAaS,MAAMV,iBAAiBD,GAC1C,OAAO8J,EAAU5J,EAAKjH,KAAIqJ,GAAK,IAAIqG,EAAerG,EAAG,KAAM,KAAMsG,KAAW1I,CAC7E,qHChYY,MAEb,WAAA9O,CAAYkB,EAAUC,EAAMwX,EAAK,IAC/B,MAAO,WACL7X,KAAKgN,GAAK,IAAIvD,EAAQ,CACpBrJ,SAAWA,EACXC,KAAOA,EACPwX,KAAOA,IAET7X,KAAK8X,eAAiB,EACtB9X,KAAKiD,eAAiB,EACtBjD,KAAK+X,eAAiBrG,EAASC,KAC/B3R,KAAKkG,QAAU,EACflG,KAAKgY,SAAW,KAGhB,aAFoBhY,KAAKgN,GAAGe,iBAAiBK,EAASwC,WAChD1P,SAAQkP,IAAMpQ,KAAKgN,GAAGW,UAAU3N,KAAKgN,GAAGtH,MAAM0K,GAAG,IAChDpQ,IACR,EAdM,EAeR,CAMD,KAAA2D,GACE3D,KAAKgN,GAAGrJ,QACR3D,KAAKgN,GAAK,IACX,CAMD,QAAAiL,GACE,OAAkB,MAAXjY,KAAKgN,EACb,CASD,IAAA9K,CAAKgK,GACH,OAAIA,GAAYwF,EAASC,MAASzF,GAAYwF,EAASG,MAAQ3F,GAAYwF,EAASI,OAClF9R,KAAK8X,cAAgB5L,GACd,EAGV,CAOD,MAAAgM,GAAWlY,KAAK8X,eAAiB,CAAE,CAMnC,OAAAK,GAAY,OAAOnY,KAAK8X,eAAiB,CAAE,CAc3C,OAAAM,CAAQC,EAAInM,GACV,OAAImM,GAAM,IAAMnM,GAAYwF,EAASC,MAASzF,GAAYwF,EAASG,MAAQ3F,GAAYwF,EAASI,OAC9F9R,KAAKiD,cAAgBoV,EACrBrY,KAAK+X,eAAiB7L,GACf,EAGV,CAOD,UAAAoM,GACEtY,KAAKiD,eAAiB,EACtBjD,KAAK+X,eAAiB,CACvB,CAMD,WAAAQ,GAAgB,OAAOvY,KAAKiD,eAAiB,CAAI,CAMjD,qBAAMuV,GACJ,GAAe,MAAXxY,KAAKgN,GAAY,OAAQ,EAC7B,MAAMyL,QAAiBzY,KAAKgN,GAAGa,gBAAgBO,EAASsC,WACxD,GAAgB,MAAZ+H,EAAkB,OAAQ,EAC9B,MAAMC,QAAaD,EAASzQ,IAAI,WAChC,OAAe,MAAR0Q,EAAeA,GAAQ,CAC/B,CAMD,gBAAAC,GAAqB,OAAO3Y,KAAK8X,aAAgB,CAMjD,gBAAAc,GAAqB,OAAO5Y,KAAKiD,aAAgB,CAMjD,iBAAA4V,GAAsB,OAAO7Y,KAAK+X,cAAiB,CAUnD,UAAAvV,CAAWsW,GACLA,EAAK,IAAGA,EAAK,GACjB9Y,KAAKkG,QAAU4S,CAChB,CAMD,UAAAC,GAAe,OAAO/Y,KAAKkG,OAAU,CAWrC,UAAM9D,CAAKC,EAAMgW,EAAGrY,KAAKiD,cAAeiJ,EAASlM,KAAK+X,gBACpD,GAAIM,EAAK,GAAgB,MAAXrY,KAAKgN,GAAY,OAAO,EACtC,IAAIgM,EACJ,GAAIvS,MAAMC,QAAQrE,IAChB2W,EAAM,IAAIzI,GACNlO,KAAOA,EACX2W,EAAIX,GAAKA,EACTW,EAAI9M,SAAWA,MACV,MAAI7J,aAAgBkO,GAGzB,OAAO,EAFPyI,EAAM3W,CAGP,CACD,IAAI2E,EAAIgS,EAAI9M,SACZ,GAAIlF,GAAK0K,EAASC,OAAS3K,EAAI0K,EAASG,MAAQ7K,EAAI0K,EAASI,KAAM,OAAO,EAC1E,GAAqB,MAAjBkH,EAAIjT,UAAmB,CAMzB,GALqB,MAAjB/F,KAAKgY,WAAkBhY,KAAKgY,eAAiBhY,KAAKgN,GAAGa,gBAAgBO,EAASgD,YAC7D,MAAjBpR,KAAKgY,WAAkBhY,KAAKgY,eAAiBhY,KAAKgN,GAAGa,gBAAgBO,EAAS8C,UAC7D,MAAjBlR,KAAKgY,WAAkBhY,KAAKgY,eAAiBhY,KAAKgN,GAAGa,gBAAgBO,EAAS4C,OAC7D,MAAjBhR,KAAKgY,WAAkBhY,KAAKgY,eAAiBhY,KAAKgN,GAAGa,gBAAgBO,EAASyC,WAC7D,MAAjB7Q,KAAKgY,WAAkBhY,KAAKgY,eAAiBhY,KAAKgN,GAAGa,gBAAgBO,EAASwC,WAC7D,MAAjB5Q,KAAKgY,SAAkB,OAAO,EAClCgB,EAAIjT,UAAY/F,KAAKgY,QACtB,CACD,MAAM3Q,QAAYrH,KAAKgN,GAAG/G,QAAQ+S,EA/Md,KAgNpB,OAAe,MAAP3R,GAAeA,EAAIG,MAAQ5C,EAAaE,KACjD,CAQD,aAAMoJ,GACJ,OAAe,MAAXlO,KAAKgN,GAAmB,WACfhN,KAAKgN,GAAGkB,SAAQpI,IAC3B,GAAIA,EAAIuC,WAAamI,EAAYnI,WAAavC,EAAIuC,WAAamL,EAAWnL,UAAY,OAAO,EAC7F,IAAIrB,EAAIlB,EAAIoG,SACZ,OAAIlF,GAAK0K,EAASC,MAAQ3K,GAAK0K,EAASG,QAC/B7R,KAAK8X,cAAgB,GAAK9X,KAAK8X,eAAiB9Q,EAE7C,GACXhH,KAAKkG,QACT,CAMD,UAAA+S,GAAe,OAAOjZ,KAAKgN,EAAK,CAQhC,qBAAMa,CAAgBqL,EAAKtB,GAAQ,GACjC,OAAe,MAAX5X,KAAKgN,GAAmB,WACfhN,KAAKgN,GAAGa,gBAAgBqL,EAAKtB,EAC3C,CAQD,sBAAM7J,CAAiBmL,EAAKtB,GAAQ,GAClC,OAAe,MAAX5X,KAAKgN,GAAmB,WACfhN,KAAKgN,GAAGe,iBAAiBmL,EAAKtB,CAAO,GACnD,CAQD,KAAAnK,CAAMtO,EAAMyY,GAAQ,GAClB,OAAe,MAAX5X,KAAKgN,GAAmB,KACrBhN,KAAKgN,GAAGS,MAAMtO,EAAMyY,EAC5B,CAOD,UAAMzX,CAAKgZ,GACT,MAAMC,QAAYpZ,KAAK6N,gBAAgBO,EAASuC,oBAChD,GAAW,MAAPyI,EAAa,OAAO,KACxB,MAAMJ,EAAM,IAAI9E,EAAqBiF,GACrCH,EAAI7Z,KAAOga,EACXH,EAAIjT,UAAYqT,EAChB,MAAM/R,QAAYrH,KAAKgN,GAAG/G,QAAQ+S,EAvRd,KAwRpB,OAAW,MAAP3R,GAAiBK,OAAO8E,UAAUC,eAAepL,KAAKgG,EAAK,WACxDA,EAAIgS,QADuE,IAEnF,WDpII,SAAeC,EAAQrK,EAAGsK,GAC/B,IAAIC,EAAS,IACRC,EAAOlD,GAAUJ,EAAUmD,EAAO,IAGvC,OAFAE,EAAO,GAAKvK,EAAEwK,EAASH,EAAO,GAC9BE,EAAO,GAAKD,EAAEhD,EAAS+C,EAAO,GACvBE,CACT,YASO,SAAiBF,EAAQlD,EAAKsD,GACnC,IAAIC,EAAM,IACLF,EAAOlD,GAAUJ,EAAUmD,EAAO,IAGvC,OAFAK,EAAI,IAAMD,EAAIJ,EAAO,IAAMG,EAC3BE,EAAI,IAAMvD,EAAIkD,EAAO,IAAM/C,EACpBoD,CACT","x_google_ignoreList":[0]}